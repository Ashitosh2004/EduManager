{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":584},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/contexts/ThemeContext\";\nimport { AuthProvider } from \"@/contexts/AuthContext\";\nimport { InstituteProvider } from \"@/contexts/InstituteContext\";\nimport { AppShell } from \"@/components/AppShell\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={() => <AppShell />} />\n      <Route path=\"/students\" component={() => <AppShell page=\"students\" />} />\n      <Route path=\"/faculty\" component={() => <AppShell page=\"faculty\" />} />\n      <Route path=\"/courses\" component={() => <AppShell page=\"courses\" />} />\n      <Route path=\"/timetable\" component={() => <AppShell page=\"timetable\" />} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <InstituteProvider>\n          <AuthProvider>\n            <TooltipProvider>\n              <Toaster />\n              <Router />\n            </TooltipProvider>\n          </AuthProvider>\n        </InstituteProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1402},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Light theme colors - Material Design 3 inspired */\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(240 10% 3.9%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(240 10% 3.9%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(240 10% 3.9%);\n  --primary: hsl(210 78% 46%);\n  --primary-foreground: hsl(0 0% 98%);\n  --secondary: hsl(210 40% 96%);\n  --secondary-foreground: hsl(222.2 84% 4.9%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215.4 16.3% 46.9%);\n  --accent: hsl(210 40% 94%);\n  --accent-foreground: hsl(222.2 84% 4.9%);\n  --destructive: hsl(0 62.8% 30.6%);\n  --destructive-foreground: hsl(0 0% 98%);\n  --border: hsl(214.3 31.8% 91.4%);\n  --input: hsl(214.3 31.8% 91.4%);\n  --ring: hsl(210 78% 46%);\n  --surface: hsl(0 0% 98%);\n  --surface-variant: hsl(210 40% 96%);\n  --outline: hsl(215.4 16.3% 46.9%);\n  \n  /* Chart colors */\n  --chart-1: hsl(210 78% 46%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  \n  /* Sidebar colors */\n  --sidebar: hsl(0 0% 98%);\n  --sidebar-foreground: hsl(240 10% 3.9%);\n  --sidebar-primary: hsl(210 78% 46%);\n  --sidebar-primary-foreground: hsl(0 0% 98%);\n  --sidebar-accent: hsl(210 40% 94%);\n  --sidebar-accent-foreground: hsl(222.2 84% 4.9%);\n  --sidebar-border: hsl(214.3 31.8% 91.4%);\n  --sidebar-ring: hsl(210 78% 46%);\n  \n  /* Typography */\n  --font-sans: 'Roboto', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'Fira Code', Menlo, Monaco, monospace;\n  \n  /* Border radius - Material Design 3 values */\n  --radius: 12px;\n  \n  /* Shadows */\n  --shadow-2xs: 0px 1px 2px 0px hsl(210 78% 46% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(210 78% 46% / 0.1), 0px 1px 2px -1px hsl(210 78% 46% / 0.1);\n  --shadow-sm: 0px 1px 3px 0px hsl(210 78% 46% / 0.1), 0px 1px 2px -1px hsl(210 78% 46% / 0.1);\n  --shadow: 0px 1px 3px 0px hsl(210 78% 46% / 0.1), 0px 1px 2px -1px hsl(210 78% 46% / 0.1);\n  --shadow-md: 0px 4px 6px -1px hsl(210 78% 46% / 0.1), 0px 2px 4px -2px hsl(210 78% 46% / 0.1);\n  --shadow-lg: 0px 10px 15px -3px hsl(210 78% 46% / 0.1), 0px 4px 6px -4px hsl(210 78% 46% / 0.1);\n  --shadow-xl: 0px 20px 25px -5px hsl(210 78% 46% / 0.1), 0px 8px 10px -6px hsl(210 78% 46% / 0.1);\n  --shadow-2xl: 0px 25px 50px -12px hsl(210 78% 46% / 0.25);\n  \n  /* Spacing */\n  --spacing: 0.25rem;\n}\n\n/* Dark theme */\n@media (prefers-color-scheme: dark) {\n  :root {\n    --background: hsl(222.2 84% 4.9%);\n    --foreground: hsl(210 40% 98%);\n    --card: hsl(222.2 84% 4.9%);\n    --card-foreground: hsl(210 40% 98%);\n    --popover: hsl(222.2 84% 4.9%);\n    --popover-foreground: hsl(210 40% 98%);\n    --primary: hsl(210 78% 46%);\n    --primary-foreground: hsl(222.2 84% 4.9%);\n    --secondary: hsl(217.2 32.6% 17.5%);\n    --secondary-foreground: hsl(210 40% 98%);\n    --muted: hsl(217.2 32.6% 17.5%);\n    --muted-foreground: hsl(215 20.2% 65.1%);\n    --accent: hsl(217.2 32.6% 17.5%);\n    --accent-foreground: hsl(210 40% 98%);\n    --destructive: hsl(0 62.8% 30.6%);\n    --destructive-foreground: hsl(0 0% 98%);\n    --border: hsl(217.2 32.6% 17.5%);\n    --input: hsl(217.2 32.6% 17.5%);\n    --ring: hsl(210 78% 46%);\n    --surface: hsl(220 13% 13%);\n    --surface-variant: hsl(217.2 32.6% 17.5%);\n    --outline: hsl(215 20.2% 65.1%);\n    \n    --sidebar: hsl(220 13% 13%);\n    --sidebar-foreground: hsl(210 40% 98%);\n    --sidebar-primary: hsl(210 78% 46%);\n    --sidebar-primary-foreground: hsl(222.2 84% 4.9%);\n    --sidebar-accent: hsl(217.2 32.6% 17.5%);\n    --sidebar-accent-foreground: hsl(210 40% 98%);\n    --sidebar-border: hsl(217.2 32.6% 17.5%);\n    --sidebar-ring: hsl(210 78% 46%);\n  }\n}\n\n.dark {\n  --background: hsl(222.2 84% 4.9%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222.2 84% 4.9%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(222.2 84% 4.9%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(210 78% 46%);\n  --primary-foreground: hsl(222.2 84% 4.9%);\n  --secondary: hsl(217.2 32.6% 17.5%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(217.2 32.6% 17.5%);\n  --muted-foreground: hsl(215 20.2% 65.1%);\n  --accent: hsl(217.2 32.6% 17.5%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(0 62.8% 30.6%);\n  --destructive-foreground: hsl(0 0% 98%);\n  --border: hsl(217.2 32.6% 17.5%);\n  --input: hsl(217.2 32.6% 17.5%);\n  --ring: hsl(210 78% 46%);\n  --surface: hsl(220 13% 13%);\n  --surface-variant: hsl(217.2 32.6% 17.5%);\n  --outline: hsl(215 20.2% 65.1%);\n  \n  --sidebar: hsl(220 13% 13%);\n  --sidebar-foreground: hsl(210 40% 98%);\n  --sidebar-primary: hsl(210 78% 46%);\n  --sidebar-primary-foreground: hsl(222.2 84% 4.9%);\n  --sidebar-accent: hsl(217.2 32.6% 17.5%);\n  --sidebar-accent-foreground: hsl(210 40% 98%);\n  --sidebar-border: hsl(217.2 32.6% 17.5%);\n  --sidebar-ring: hsl(210 78% 46%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n    font-feature-settings: \"rlig\" 1, \"calt\" 1;\n  }\n\n  html {\n    scroll-behavior: smooth;\n  }\n\n  /* Remove focus outline for mouse users */\n  .js-focus-visible :focus:not(.focus-visible) {\n    outline: none;\n  }\n}\n\n@layer utilities {\n  /* Material Design 3 inspired animations */\n  .animate-slide-up {\n    animation: slideUp 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .animate-fade-in {\n    animation: fadeIn 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .animate-ripple {\n    animation: ripple 0.6s linear;\n  }\n\n  .animate-scale-in {\n    animation: scaleIn 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  /* Material Design 3 surface styles */\n  .surface-elevated {\n    background: var(--surface);\n    box-shadow: var(--shadow-md);\n  }\n\n  .surface-elevated:hover {\n    box-shadow: var(--shadow-lg);\n  }\n\n  /* Glass effect for modern UI */\n  .glass-effect {\n    backdrop-filter: blur(8px);\n    -webkit-backdrop-filter: blur(8px);\n    background: hsl(var(--background) / 0.8);\n    border: 1px solid hsl(var(--border) / 0.5);\n  }\n\n  /* Ripple effect utility */\n  .ripple-effect {\n    position: relative;\n    overflow: hidden;\n  }\n\n  .ripple-effect::before {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 0;\n    height: 0;\n    border-radius: 50%;\n    background: hsl(var(--primary) / 0.3);\n    transform: translate(-50%, -50%);\n    transform-origin: center;\n    transition: width 0.6s, height 0.6s;\n  }\n\n  .ripple-effect:active::before {\n    width: 300px;\n    height: 300px;\n  }\n\n  /* FAB shadow */\n  .fab-shadow {\n    box-shadow: 0 3px 5px -1px hsl(var(--primary) / 0.2), \n                0 6px 10px 0 hsl(var(--primary) / 0.14), \n                0 1px 18px 0 hsl(var(--primary) / 0.12);\n  }\n\n  .fab-shadow:hover {\n    box-shadow: 0 5px 5px -3px hsl(var(--primary) / 0.2), \n                0 8px 10px 1px hsl(var(--primary) / 0.14), \n                0 3px 14px 2px hsl(var(--primary) / 0.12);\n  }\n\n  /* Card elevation states */\n  .card-elevated {\n    box-shadow: var(--shadow-sm);\n    transition: box-shadow 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .card-elevated:hover {\n    box-shadow: var(--shadow-md);\n  }\n\n  /* Navigation rail styles */\n  .nav-rail-item {\n    position: relative;\n    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .nav-rail-item.active::before {\n    content: '';\n    position: absolute;\n    left: 0;\n    top: 50%;\n    transform: translateY(-50%);\n    width: 3px;\n    height: 32px;\n    background: var(--primary);\n    border-radius: 0 2px 2px 0;\n  }\n\n  /* Bottom navigation indicator */\n  .bottom-nav-indicator {\n    position: relative;\n  }\n\n  .bottom-nav-indicator.active::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 50%;\n    transform: translateX(-50%);\n    width: 24px;\n    height: 3px;\n    background: var(--primary);\n    border-radius: 0 0 2px 2px;\n  }\n\n  /* Swipe indicator for mobile */\n  .swipe-indicator {\n    width: 32px;\n    height: 4px;\n    border-radius: 2px;\n    background: var(--outline);\n    margin: 8px auto;\n  }\n\n  /* Loading spinner */\n  .loading-spinner {\n    width: 20px;\n    height: 20px;\n    border: 2px solid hsl(var(--primary) / 0.2);\n    border-left-color: var(--primary);\n    border-radius: 50%;\n    animation: spin 1s linear infinite;\n  }\n\n  /* Custom scrollbar */\n  .custom-scrollbar {\n    scrollbar-width: thin;\n    scrollbar-color: hsl(var(--muted)) hsl(var(--background));\n  }\n\n  .custom-scrollbar::-webkit-scrollbar {\n    width: 8px;\n    height: 8px;\n  }\n\n  .custom-scrollbar::-webkit-scrollbar-track {\n    background: hsl(var(--background));\n  }\n\n  .custom-scrollbar::-webkit-scrollbar-thumb {\n    background: hsl(var(--muted));\n    border-radius: 4px;\n  }\n\n  .custom-scrollbar::-webkit-scrollbar-thumb:hover {\n    background: hsl(var(--muted-foreground));\n  }\n}\n\n@keyframes slideUp {\n  from {\n    transform: translateY(100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes ripple {\n  to {\n    transform: scale(4);\n    opacity: 0;\n  }\n}\n\n@keyframes scaleIn {\n  from {\n    transform: scale(0.8);\n    opacity: 0;\n  }\n  to {\n    transform: scale(1);\n    opacity: 1;\n  }\n}\n\n@keyframes spin {\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes pulse {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.5;\n  }\n}\n\n/* Print styles */\n@media print {\n  .no-print {\n    display: none !important;\n  }\n\n  .print-break-inside-avoid {\n    break-inside: avoid;\n  }\n\n  .print-break-before {\n    break-before: page;\n  }\n}\n\n/* High contrast mode support */\n@media (prefers-contrast: high) {\n  :root {\n    --border: hsl(0 0% 50%);\n    --ring: hsl(210 78% 46%);\n  }\n\n  .dark {\n    --border: hsl(0 0% 70%);\n  }\n}\n\n/* Reduced motion support */\n@media (prefers-reduced-motion: reduce) {\n  * {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n  }\n}\n\n/* Focus styles for accessibility */\n.focus-visible {\n  outline: 2px solid var(--ring);\n  outline-offset: 2px;\n}\n\n/* Skip link for accessibility */\n.skip-link {\n  position: absolute;\n  top: -40px;\n  left: 6px;\n  background: var(--primary);\n  color: var(--primary-foreground);\n  padding: 8px;\n  border-radius: 4px;\n  text-decoration: none;\n  z-index: 1000;\n  transition: top 0.2s;\n}\n\n.skip-link:focus {\n  top: 6px;\n}\n\n/* Screen reader only content */\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border: 0;\n}\n","size_bytes":10702},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AppShell.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { TopAppBar } from '@/components/layout/TopAppBar';\nimport { NavigationRail } from '@/components/layout/NavigationRail';\nimport { BottomNavigation } from '@/components/layout/BottomNavigation';\nimport { FloatingActionButton } from '@/components/layout/FloatingActionButton';\nimport { InstituteSelectionModal } from '@/components/modals/InstituteSelectionModal';\nimport { AuthScreen } from '@/components/auth/AuthScreen';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useInstitute } from '@/contexts/InstituteContext';\n\n// Pages\nimport Dashboard from '@/pages/dashboard';\nimport StudentManager from '@/pages/student-manager';\nimport FacultyManager from '@/pages/faculty-manager';\nimport CourseManager from '@/pages/course-manager';\nimport TimetableGenerator from '@/pages/timetable-generator';\n\ninterface AppShellProps {\n  page?: string;\n}\n\nexport const AppShell: React.FC<AppShellProps> = ({ page = 'dashboard' }) => {\n  const { user, institute, loading } = useAuth();\n  const { selectedInstitute, setSelectedInstitute } = useInstitute();\n  const [showInstituteModal, setShowInstituteModal] = useState(false);\n\n  useEffect(() => {\n    // Show institute selection if no institute is selected and user is not logged in\n    if (!loading && !user && !selectedInstitute) {\n      setShowInstituteModal(true);\n    }\n  }, [loading, user, selectedInstitute]);\n\n  const handleInstituteSelect = (institute: any) => {\n    setSelectedInstitute(institute);\n    setShowInstituteModal(false);\n  };\n\n  const renderPage = () => {\n    switch (page) {\n      case 'students':\n        return <StudentManager />;\n      case 'faculty':\n        return <FacultyManager />;\n      case 'courses':\n        return <CourseManager />;\n      case 'timetable':\n        return <TimetableGenerator />;\n      default:\n        return <Dashboard />;\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Show institute selection modal\n  if (showInstituteModal) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <InstituteSelectionModal\n          open={showInstituteModal}\n          onClose={() => setShowInstituteModal(false)}\n          onSelect={handleInstituteSelect}\n        />\n      </div>\n    );\n  }\n\n  // Show auth screen if no user\n  if (!user && selectedInstitute) {\n    return <AuthScreen />;\n  }\n\n  // Show main app if user is authenticated\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <TopAppBar />\n      \n      <div className=\"flex\">\n        <NavigationRail />\n        \n        <main className=\"flex-1 overflow-hidden pb-16 md:pb-0\">\n          {renderPage()}\n        </main>\n      </div>\n\n      <BottomNavigation />\n      <FloatingActionButton />\n    </div>\n  );\n};\n","size_bytes":3101},"client/src/contexts/AuthContext.tsx":{"content":"import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { User, onAuthStateChanged, signInWithEmailAndPassword } from 'firebase/auth';\nimport { auth } from '@/lib/firebase';\nimport { AuthState, Institute } from '@/types';\nimport { firestoreService } from '@/services/firestoreService';\n\ninterface AuthContextType extends AuthState {\n  signIn: (email: string, password: string) => Promise<void>;\n  signInWithGoogle: () => Promise<void>;\n  signOut: () => Promise<void>;\n  setInstitute: (institute: Institute) => void;\n}\n\nexport const AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [authState, setAuthState] = useState<AuthState>({\n    user: null,\n    institute: null,\n    loading: true,\n    error: null,\n  });\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser: User | null) => {\n      try {\n        if (firebaseUser) {\n          // Get user data from Firestore\n          const userData = await firestoreService.getUser(firebaseUser.uid);\n          if (userData) {\n            // Get institute data\n            const instituteData = await firestoreService.getInstitute(userData.instituteId);\n            setAuthState({\n              user: userData,\n              institute: instituteData,\n              loading: false,\n              error: null,\n            });\n          } else {\n            setAuthState({\n              user: null,\n              institute: null,\n              loading: false,\n              error: 'User data not found',\n            });\n          }\n        } else {\n          setAuthState({\n            user: null,\n            institute: null,\n            loading: false,\n            error: null,\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n        setAuthState({\n          user: null,\n          institute: null,\n          loading: false,\n          error: 'Failed to load user data',\n        });\n      }\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  const signIn = async (email: string, password: string) => {\n    try {\n      setAuthState(prev => ({ ...prev, loading: true, error: null }));\n      await signInWithEmailAndPassword(auth, email, password);\n    } catch (error: any) {\n      setAuthState(prev => ({ \n        ...prev, \n        loading: false, \n        error: error.message || 'Sign in failed' \n      }));\n      throw error;\n    }\n  };\n\n  const signInWithGoogle = async () => {\n    try {\n      setAuthState(prev => ({ ...prev, loading: true, error: null }));\n      const { signInWithGoogle: googleSignIn } = await import('@/lib/firebase');\n      await googleSignIn();\n    } catch (error: any) {\n      setAuthState(prev => ({ \n        ...prev, \n        loading: false, \n        error: error.message || 'Google sign in failed' \n      }));\n      throw error;\n    }\n  };\n\n  const signOut = async () => {\n    try {\n      const { signOutUser } = await import('@/lib/firebase');\n      await signOutUser();\n    } catch (error: any) {\n      console.error('Sign out error:', error);\n    }\n  };\n\n  const setInstitute = (institute: Institute) => {\n    setAuthState(prev => ({ ...prev, institute }));\n  };\n\n  const value: AuthContextType = {\n    ...authState,\n    signIn,\n    signInWithGoogle,\n    signOut,\n    setInstitute,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n","size_bytes":3763},"client/src/contexts/InstituteContext.tsx":{"content":"import React, { createContext, useContext, useState, ReactNode } from 'react';\nimport { Institute } from '@/types';\n\ninterface InstituteContextType {\n  selectedInstitute: Institute | null;\n  setSelectedInstitute: (institute: Institute | null) => void;\n  institutes: Institute[];\n  setInstitutes: (institutes: Institute[]) => void;\n  loading: boolean;\n  setLoading: (loading: boolean) => void;\n}\n\nconst InstituteContext = createContext<InstituteContextType | undefined>(undefined);\n\nexport const useInstitute = () => {\n  const context = useContext(InstituteContext);\n  if (context === undefined) {\n    throw new Error('useInstitute must be used within an InstituteProvider');\n  }\n  return context;\n};\n\ninterface InstituteProviderProps {\n  children: ReactNode;\n}\n\nexport const InstituteProvider: React.FC<InstituteProviderProps> = ({ children }) => {\n  const [selectedInstitute, setSelectedInstitute] = useState<Institute | null>(null);\n  const [institutes, setInstitutes] = useState<Institute[]>([]);\n  const [loading, setLoading] = useState(false);\n\n  const value: InstituteContextType = {\n    selectedInstitute,\n    setSelectedInstitute,\n    institutes,\n    setInstitutes,\n    loading,\n    setLoading,\n  };\n\n  return (\n    <InstituteContext.Provider value={value}>\n      {children}\n    </InstituteContext.Provider>\n  );\n};\n","size_bytes":1324},"client/src/contexts/ThemeContext.tsx":{"content":"import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\n\ntype Theme = 'light' | 'dark' | 'system';\n\ninterface ThemeContextType {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  isDarkMode: boolean;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\n  const [theme, setTheme] = useState<Theme>('system');\n  const [isDarkMode, setIsDarkMode] = useState(false);\n\n  useEffect(() => {\n    // Load theme preference from localStorage\n    const savedTheme = localStorage.getItem('theme') as Theme;\n    if (savedTheme) {\n      setTheme(savedTheme);\n    }\n  }, []);\n\n  useEffect(() => {\n    const updateTheme = () => {\n      let shouldBeDark = false;\n\n      if (theme === 'dark') {\n        shouldBeDark = true;\n      } else if (theme === 'light') {\n        shouldBeDark = false;\n      } else {\n        // system theme\n        shouldBeDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      }\n\n      setIsDarkMode(shouldBeDark);\n      document.documentElement.classList.toggle('dark', shouldBeDark);\n    };\n\n    updateTheme();\n\n    // Listen for system theme changes\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleSystemThemeChange = () => {\n      if (theme === 'system') {\n        updateTheme();\n      }\n    };\n\n    mediaQuery.addEventListener('change', handleSystemThemeChange);\n    return () => mediaQuery.removeEventListener('change', handleSystemThemeChange);\n  }, [theme]);\n\n  const handleSetTheme = (newTheme: Theme) => {\n    setTheme(newTheme);\n    localStorage.setItem('theme', newTheme);\n  };\n\n  const value: ThemeContextType = {\n    theme,\n    setTheme: handleSetTheme,\n    isDarkMode,\n  };\n\n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n","size_bytes":2166},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useContext } from 'react';\nimport { AuthContext } from '@/contexts/AuthContext';\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n","size_bytes":289},"client/src/hooks/useFirestore.ts":{"content":"import { useState, useEffect } from 'react';\nimport { firestoreService } from '@/services/firestoreService';\nimport { useAuth } from '@/contexts/AuthContext';\n\nexport interface UseFirestoreOptions {\n  enabled?: boolean;\n}\n\nexport const useFirestore = () => {\n  const { institute } = useAuth();\n\n  const useStudentsByClass = (department: string, className: string, options: UseFirestoreOptions = {}) => {\n    const [data, setData] = useState<any[]>([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState<string | null>(null);\n\n    useEffect(() => {\n      if (!institute || !department || !className || options.enabled === false) {\n        return;\n      }\n\n      const fetchData = async () => {\n        try {\n          setLoading(true);\n          setError(null);\n          const students = await firestoreService.getStudentsByClass(institute.id, department, className);\n          setData(students);\n        } catch (err) {\n          setError(err instanceof Error ? err.message : 'Failed to fetch students');\n          console.error('Error fetching students:', err);\n        } finally {\n          setLoading(false);\n        }\n      };\n\n      fetchData();\n    }, [institute, department, className, options.enabled]);\n\n    return { data, loading, error, refetch: () => {} };\n  };\n\n  const useFacultyByDepartment = (department: string, options: UseFirestoreOptions = {}) => {\n    const [data, setData] = useState<any[]>([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState<string | null>(null);\n\n    useEffect(() => {\n      if (!institute || !department || options.enabled === false) {\n        return;\n      }\n\n      const fetchData = async () => {\n        try {\n          setLoading(true);\n          setError(null);\n          const faculty = await firestoreService.getFacultyByDepartment(institute.id, department);\n          setData(faculty);\n        } catch (err) {\n          setError(err instanceof Error ? err.message : 'Failed to fetch faculty');\n          console.error('Error fetching faculty:', err);\n        } finally {\n          setLoading(false);\n        }\n      };\n\n      fetchData();\n    }, [institute, department, options.enabled]);\n\n    return { data, loading, error, refetch: () => {} };\n  };\n\n  const useCoursesByDepartment = (department: string, options: UseFirestoreOptions = {}) => {\n    const [data, setData] = useState<any[]>([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState<string | null>(null);\n\n    useEffect(() => {\n      if (!institute || !department || options.enabled === false) {\n        return;\n      }\n\n      const fetchData = async () => {\n        try {\n          setLoading(true);\n          setError(null);\n          const courses = await firestoreService.getCoursesByDepartment(institute.id, department);\n          setData(courses);\n        } catch (err) {\n          setError(err instanceof Error ? err.message : 'Failed to fetch courses');\n          console.error('Error fetching courses:', err);\n        } finally {\n          setLoading(false);\n        }\n      };\n\n      fetchData();\n    }, [institute, department, options.enabled]);\n\n    return { data, loading, error, refetch: () => {} };\n  };\n\n  const useStatistics = () => {\n    const [data, setData] = useState({ students: 0, faculty: 0, courses: 0, timetables: 0 });\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState<string | null>(null);\n\n    useEffect(() => {\n      if (!institute) {\n        return;\n      }\n\n      const fetchData = async () => {\n        try {\n          setLoading(true);\n          setError(null);\n          const stats = await firestoreService.getStatistics(institute.id);\n          setData(stats);\n        } catch (err) {\n          setError(err instanceof Error ? err.message : 'Failed to fetch statistics');\n          console.error('Error fetching statistics:', err);\n        } finally {\n          setLoading(false);\n        }\n      };\n\n      fetchData();\n    }, [institute]);\n\n    return { data, loading, error, refetch: () => {} };\n  };\n\n  return {\n    useStudentsByClass,\n    useFacultyByDepartment,\n    useCoursesByDepartment,\n    useStatistics,\n  };\n};\n","size_bytes":4235},"client/src/lib/firebase.ts":{"content":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, GoogleAuthProvider, signInWithRedirect, getRedirectResult, signInWithEmailAndPassword, signOut, User } from \"firebase/auth\";\nimport { getFirestore, connectFirestoreEmulator } from \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,\n  authDomain: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebaseapp.com`,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebasestorage.app`,\n  appId: import.meta.env.VITE_FIREBASE_APP_ID,\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Initialize Firebase Auth\nexport const auth = getAuth(app);\n\n// Initialize Firestore\nexport const db = getFirestore(app);\n\n// Google Auth Provider\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\n\n// Auth functions\nexport const signInWithGoogle = () => {\n  return signInWithRedirect(auth, googleProvider);\n};\n\nexport const handleRedirectResult = () => {\n  return getRedirectResult(auth);\n};\n\nexport const signInWithEmail = (email: string, password: string) => {\n  return signInWithEmailAndPassword(auth, email, password);\n};\n\nexport const signOutUser = () => {\n  return signOut(auth);\n};\n\n\n// Domain validation function\nexport const validateEmailDomain = (email: string, instituteDomain: string): boolean => {\n  const emailDomain = email.substring(email.indexOf('@'));\n  return emailDomain === instituteDomain;\n};\n\nexport default app;\n","size_bytes":1580},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/course-manager.tsx":{"content":"import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { BookOpen, Plus, FileText, TrendingUp, Award } from 'lucide-react';\n\nconst CourseManager: React.FC = () => {\n  return (\n    <div className=\"p-4 sm:p-6 lg:p-8\">\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground mb-2\">Course Manager</h1>\n            <p className=\"text-muted-foreground\">Create and manage courses, assignments, and grades</p>\n          </div>\n          <Button data-testid=\"button-add-course\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Course\n          </Button>\n        </div>\n      </div>\n\n      {/* Coming Soon Message */}\n      <Card>\n        <CardContent className=\"p-12 text-center\">\n          <div className=\"w-16 h-16 bg-purple-500/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <BookOpen className=\"h-8 w-8 text-purple-500\" />\n          </div>\n          <h3 className=\"text-lg font-medium text-foreground mb-2\">Course Management</h3>\n          <p className=\"text-muted-foreground mb-4\">\n            Course management features are being implemented. This will include department-wise course creation,\n            assignment and marks management, and progress tracking with detailed reports.\n          </p>\n          <div className=\"flex flex-wrap justify-center gap-2 text-sm text-muted-foreground\">\n            <Badge variant=\"outline\">Course Creation</Badge>\n            <Badge variant=\"outline\">Assignment Management</Badge>\n            <Badge variant=\"outline\">Grade Tracking</Badge>\n            <Badge variant=\"outline\">Progress Reports</Badge>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default CourseManager;\n","size_bytes":1959},"client/src/pages/dashboard.tsx":{"content":"import React, { useEffect, useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { firestoreService } from '@/services/firestoreService';\nimport { Link } from 'wouter';\nimport { \n  Users, \n  UserCheck, \n  BookOpen, \n  Calendar, \n  TrendingUp,\n  ArrowRight,\n  Plus,\n  Clock\n} from 'lucide-react';\n\ninterface DashboardStats {\n  students: number;\n  faculty: number;\n  courses: number;\n  timetables: number;\n}\n\nconst Dashboard: React.FC = () => {\n  const { user, institute } = useAuth();\n  const [stats, setStats] = useState<DashboardStats>({ students: 0, faculty: 0, courses: 0, timetables: 0 });\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (institute) {\n      loadStatistics();\n    }\n  }, [institute]);\n\n  const loadStatistics = async () => {\n    if (!institute) return;\n    \n    try {\n      setLoading(true);\n      const statistics = await firestoreService.getStatistics(institute.id);\n      setStats(statistics);\n    } catch (error) {\n      console.error('Error loading statistics:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const managementCards = [\n    {\n      title: 'Student Manager',\n      description: 'Organize students by department and class. Add, edit, and manage student records with comprehensive profiles.',\n      icon: Users,\n      gradient: 'from-blue-50 to-indigo-50 dark:from-blue-950/20 dark:to-indigo-950/20',\n      iconBg: 'bg-blue-500',\n      link: '/students',\n      features: [\n        'Department â†’ Class â†’ Student Navigation',\n        'CRUD Operations for Student Records',\n        'Real-time Firestore Synchronization'\n      ]\n    },\n    {\n      title: 'Faculty Manager',\n      description: 'Manage faculty members by department. Assign multiple classes and subjects to teachers with flexible scheduling.',\n      icon: UserCheck,\n      gradient: 'from-green-50 to-emerald-50 dark:from-green-950/20 dark:to-emerald-950/20',\n      iconBg: 'bg-green-500',\n      link: '/faculty',\n      features: [\n        'Department-based Organization',\n        'Multi-class Subject Assignments',\n        'Firebase Cloud Messaging'\n      ]\n    },\n    {\n      title: 'Course Manager',\n      description: 'Create and manage courses by department. Track assignments, manage grades, and monitor student progress.',\n      icon: BookOpen,\n      gradient: 'from-purple-50 to-violet-50 dark:from-purple-950/20 dark:to-violet-950/20',\n      iconBg: 'bg-purple-500',\n      link: '/courses',\n      features: [\n        'Department-wise Course Creation',\n        'Assignment & Marks Management',\n        'Progress Tracking & Reports'\n      ]\n    },\n    {\n      title: 'Timetable Generator',\n      description: 'AI-powered timetable generation with conflict detection. Export to PDF and Excel formats.',\n      icon: Calendar,\n      gradient: 'from-orange-50 to-red-50 dark:from-orange-950/20 dark:to-red-950/20',\n      iconBg: 'bg-orange-500',\n      link: '/timetable',\n      features: [\n        'Intelligent Conflict Detection',\n        'PDF & Excel Export Options',\n        'Room & Teacher Availability'\n      ]\n    }\n  ];\n\n  const recentActivities = [\n    {\n      icon: Plus,\n      iconBg: 'bg-primary/10',\n      iconColor: 'text-primary',\n      title: 'Added 15 new students to CSE-A batch',\n      time: '2 hours ago'\n    },\n    {\n      icon: Calendar,\n      iconBg: 'bg-accent/20',\n      iconColor: 'text-accent-foreground',\n      title: 'Generated timetable for Fall 2024',\n      time: '5 hours ago'\n    },\n    {\n      icon: BookOpen,\n      iconBg: 'bg-secondary/20',\n      iconColor: 'text-secondary-foreground',\n      title: 'Course \"Advanced Algorithms\" updated',\n      time: '1 day ago'\n    }\n  ];\n\n  const upcomingEvents = [\n    {\n      date: { month: 'Dec', day: '15' },\n      title: 'Faculty Meeting',\n      subtitle: '2:00 PM - Conference Room A'\n    },\n    {\n      date: { month: 'Dec', day: '18' },\n      title: 'Semester Exam Schedule',\n      subtitle: '9:00 AM - All Departments'\n    },\n    {\n      date: { month: 'Dec', day: '20' },\n      title: 'Winter Break Begins',\n      subtitle: 'All Day - Campus Wide'\n    }\n  ];\n\n  return (\n    <div className=\"p-4 sm:p-6 lg:p-8\">\n      {/* Welcome Section */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-foreground mb-2\">\n          Welcome back, <span data-testid=\"text-user-name\">{user?.name || 'User'}</span>\n        </h1>\n        <p className=\"text-muted-foreground\">\n          Here's what's happening at <span data-testid=\"text-institute-name\">{institute?.name || 'Your Institute'}</span> today\n        </p>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-8\">\n        <Card className=\"transition-all duration-300 hover:shadow-lg\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"w-12 h-12 bg-primary/10 rounded-xl flex items-center justify-center\">\n                <Users className=\"h-6 w-6 text-primary\" />\n              </div>\n              <div className=\"flex items-center text-sm text-green-600\">\n                <TrendingUp className=\"h-4 w-4 mr-1\" />\n                <span>+12%</span>\n              </div>\n            </div>\n            <h3 className=\"text-2xl font-bold text-foreground mb-1\" data-testid=\"stat-students\">\n              {loading ? '...' : stats.students}\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">Total Students</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"transition-all duration-300 hover:shadow-lg\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"w-12 h-12 bg-green-500/10 rounded-xl flex items-center justify-center\">\n                <UserCheck className=\"h-6 w-6 text-green-500\" />\n              </div>\n              <div className=\"flex items-center text-sm text-green-600\">\n                <TrendingUp className=\"h-4 w-4 mr-1\" />\n                <span>+3%</span>\n              </div>\n            </div>\n            <h3 className=\"text-2xl font-bold text-foreground mb-1\" data-testid=\"stat-faculty\">\n              {loading ? '...' : stats.faculty}\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">Faculty Members</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"transition-all duration-300 hover:shadow-lg\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"w-12 h-12 bg-purple-500/10 rounded-xl flex items-center justify-center\">\n                <BookOpen className=\"h-6 w-6 text-purple-500\" />\n              </div>\n              <div className=\"flex items-center text-sm text-green-600\">\n                <TrendingUp className=\"h-4 w-4 mr-1\" />\n                <span>+8%</span>\n              </div>\n            </div>\n            <h3 className=\"text-2xl font-bold text-foreground mb-1\" data-testid=\"stat-courses\">\n              {loading ? '...' : stats.courses}\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">Active Courses</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"transition-all duration-300 hover:shadow-lg\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"w-12 h-12 bg-orange-500/10 rounded-xl flex items-center justify-center\">\n                <Calendar className=\"h-6 w-6 text-orange-500\" />\n              </div>\n              <span className=\"text-sm text-muted-foreground\">Updated</span>\n            </div>\n            <h3 className=\"text-2xl font-bold text-foreground mb-1\" data-testid=\"stat-timetables\">\n              {loading ? '...' : stats.timetables}\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">Timetables Generated</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Management Containers */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n        {managementCards.map((card, index) => {\n          const Icon = card.icon;\n          return (\n            <Link key={index} href={card.link}>\n              <Card className={`bg-gradient-to-br ${card.gradient} p-8 cursor-pointer transition-all duration-300 hover:scale-[1.02] hover:shadow-lg`}>\n                <CardContent className=\"p-0\">\n                  <div className=\"flex items-start justify-between mb-6\">\n                    <div className={`w-16 h-16 ${card.iconBg} rounded-2xl flex items-center justify-center`}>\n                      <Icon className=\"h-8 w-8 text-white\" />\n                    </div>\n                    <ArrowRight className=\"h-6 w-6 text-gray-600 dark:text-gray-400\" />\n                  </div>\n                  \n                  <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">{card.title}</h2>\n                  <p className=\"text-gray-600 dark:text-gray-300 mb-6\">{card.description}</p>\n                  \n                  <div className=\"space-y-3\">\n                    {card.features.map((feature, featureIndex) => (\n                      <div key={featureIndex} className=\"flex items-center text-sm text-gray-600 dark:text-gray-400\">\n                        <div className=\"w-1.5 h-1.5 bg-current rounded-full mr-2\" />\n                        {feature}\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </Link>\n          );\n        })}\n      </div>\n\n      {/* Recent Activity and Upcoming Schedule */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Recent Activity */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Recent Activity</CardTitle>\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all-activity\">\n                View All\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {recentActivities.map((activity, index) => {\n                const Icon = activity.icon;\n                return (\n                  <div key={index} className=\"flex items-start space-x-3\">\n                    <div className={`w-8 h-8 ${activity.iconBg} rounded-full flex items-center justify-center flex-shrink-0`}>\n                      <Icon className={`h-4 w-4 ${activity.iconColor}`} />\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm text-foreground\">{activity.title}</p>\n                      <p className=\"text-xs text-muted-foreground\">{activity.time}</p>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Upcoming Schedule */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Upcoming Schedule</CardTitle>\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-calendar\">\n                View Calendar\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {upcomingEvents.map((event, index) => (\n                <div key={index} className=\"flex items-center space-x-4\">\n                  <div className=\"text-center flex-shrink-0\">\n                    <div className=\"text-sm font-medium text-muted-foreground\">{event.date.month}</div>\n                    <div className=\"text-lg font-bold text-foreground\">{event.date.day}</div>\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-foreground\">{event.title}</p>\n                    <p className=\"text-xs text-muted-foreground\">{event.subtitle}</p>\n                  </div>\n                  <ArrowRight className=\"h-4 w-4 text-muted-foreground flex-shrink-0\" />\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","size_bytes":12461},"client/src/pages/faculty-manager.tsx":{"content":"import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { UserCheck, Plus, Mail, Phone, BookOpen, Users } from 'lucide-react';\n\nconst FacultyManager: React.FC = () => {\n  return (\n    <div className=\"p-4 sm:p-6 lg:p-8\">\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground mb-2\">Faculty Manager</h1>\n            <p className=\"text-muted-foreground\">Manage faculty members and their assignments</p>\n          </div>\n          <Button data-testid=\"button-add-faculty\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Faculty\n          </Button>\n        </div>\n      </div>\n\n      {/* Coming Soon Message */}\n      <Card>\n        <CardContent className=\"p-12 text-center\">\n          <div className=\"w-16 h-16 bg-green-500/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <UserCheck className=\"h-8 w-8 text-green-500\" />\n          </div>\n          <h3 className=\"text-lg font-medium text-foreground mb-2\">Faculty Management</h3>\n          <p className=\"text-muted-foreground mb-4\">\n            Faculty management features are being implemented. This will include department-based organization,\n            multi-class subject assignments, and Firebase Cloud Messaging integration.\n          </p>\n          <div className=\"flex flex-wrap justify-center gap-2 text-sm text-muted-foreground\">\n            <Badge variant=\"outline\">Department Organization</Badge>\n            <Badge variant=\"outline\">Subject Assignments</Badge>\n            <Badge variant=\"outline\">Class Scheduling</Badge>\n            <Badge variant=\"outline\">Notifications</Badge>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default FacultyManager;\n","size_bytes":1961},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/student-manager.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from '@/components/ui/select';\nimport { \n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport { Badge } from '@/components/ui/badge';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { firestoreService } from '@/services/firestoreService';\nimport { Student } from '@/types';\nimport { \n  ArrowLeft, \n  Computer, \n  Zap, \n  Cog, \n  Plus, \n  Search,\n  MoreVertical,\n  Edit,\n  Trash2,\n  Users\n} from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\nconst departments = [\n  { id: 'cse', name: 'Computer Science', icon: Computer, color: 'bg-blue-500' },\n  { id: 'ece', name: 'Electronics & Comm.', icon: Zap, color: 'bg-green-500' },\n  { id: 'mech', name: 'Mechanical Engg.', icon: Cog, color: 'bg-orange-500' },\n];\n\nconst classes = {\n  cse: ['CSE-A (1st Year)', 'CSE-B (1st Year)', 'CSE-A (2nd Year)', 'CSE-B (2nd Year)', 'CSE-A (3rd Year)', 'CSE-B (3rd Year)', 'CSE-A (4th Year)', 'CSE-B (4th Year)'],\n  ece: ['ECE-A (1st Year)', 'ECE-B (1st Year)', 'ECE-A (2nd Year)', 'ECE-B (2nd Year)', 'ECE-A (3rd Year)', 'ECE-B (3rd Year)', 'ECE-A (4th Year)', 'ECE-B (4th Year)'],\n  mech: ['MECH-A (1st Year)', 'MECH-B (1st Year)', 'MECH-A (2nd Year)', 'MECH-B (2nd Year)', 'MECH-A (3rd Year)', 'MECH-B (3rd Year)', 'MECH-A (4th Year)', 'MECH-B (4th Year)'],\n};\n\nconst StudentManager: React.FC = () => {\n  const { institute } = useAuth();\n  const { toast } = useToast();\n  const [selectedDepartment, setSelectedDepartment] = useState<string | null>(null);\n  const [selectedClass, setSelectedClass] = useState<string | null>(null);\n  const [students, setStudents] = useState<Student[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [departmentStats, setDepartmentStats] = useState<Record<string, number>>({});\n\n  useEffect(() => {\n    if (institute) {\n      loadDepartmentStats();\n    }\n  }, [institute]);\n\n  useEffect(() => {\n    if (selectedDepartment && selectedClass && institute) {\n      loadStudents();\n    }\n  }, [selectedDepartment, selectedClass, institute]);\n\n  const loadDepartmentStats = async () => {\n    if (!institute) return;\n    \n    const stats: Record<string, number> = {};\n    for (const dept of departments) {\n      try {\n        // This is a simplified count - in real implementation, you'd count across all classes\n        const sampleClass = classes[dept.id as keyof typeof classes][0];\n        const students = await firestoreService.getStudentsByClass(institute.id, dept.id, sampleClass);\n        stats[dept.id] = students.length * 4; // Approximation for all years\n      } catch (error) {\n        stats[dept.id] = 0;\n      }\n    }\n    setDepartmentStats(stats);\n  };\n\n  const loadStudents = async () => {\n    if (!institute || !selectedDepartment || !selectedClass) return;\n    \n    try {\n      setLoading(true);\n      const studentList = await firestoreService.getStudentsByClass(\n        institute.id, \n        selectedDepartment, \n        selectedClass\n      );\n      setStudents(studentList);\n    } catch (error) {\n      console.error('Error loading students:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load students. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDepartmentSelect = (deptId: string) => {\n    setSelectedDepartment(deptId);\n    setSelectedClass(null);\n    setStudents([]);\n  };\n\n  const handleClassSelect = (className: string) => {\n    setSelectedClass(className);\n  };\n\n  const handleBack = () => {\n    if (selectedClass) {\n      setSelectedClass(null);\n      setStudents([]);\n    } else if (selectedDepartment) {\n      setSelectedDepartment(null);\n    }\n  };\n\n  const filteredStudents = students.filter(student =>\n    student.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    student.rollNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    student.email.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  if (!selectedDepartment) {\n    // Department Selection View\n    return (\n      <div className=\"p-4 sm:p-6 lg:p-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">Student Manager</h1>\n          <p className=\"text-muted-foreground\">Select a department to manage students</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {departments.map((dept) => {\n            const Icon = dept.icon;\n            const studentCount = departmentStats[dept.id] || 0;\n            \n            return (\n              <Card \n                key={dept.id}\n                className=\"cursor-pointer transition-all duration-300 hover:shadow-lg hover:scale-[1.02]\"\n                onClick={() => handleDepartmentSelect(dept.id)}\n              >\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div className={`w-12 h-12 ${dept.color}/10 rounded-xl flex items-center justify-center`}>\n                      <Icon className={`h-6 w-6 text-${dept.color.split('-')[1]}-500`} />\n                    </div>\n                    <span className=\"text-2xl font-bold text-foreground\">{studentCount}</span>\n                  </div>\n                  <h3 className=\"font-semibold text-foreground mb-1\">{dept.name}</h3>\n                  <p className=\"text-sm text-muted-foreground\">{dept.id.toUpperCase()} Department</p>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n\n  if (!selectedClass) {\n    // Class Selection View\n    const selectedDept = departments.find(d => d.id === selectedDepartment);\n    const Icon = selectedDept?.icon || Computer;\n    \n    return (\n      <div className=\"p-4 sm:p-6 lg:p-8\">\n        <div className=\"mb-8\">\n          <div className=\"flex items-center space-x-4 mb-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleBack}\n              className=\"p-2\"\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Button>\n            <div>\n              <h1 className=\"text-3xl font-bold text-foreground\">{selectedDept?.name}</h1>\n              <p className=\"text-muted-foreground\">Select a class to manage students</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {classes[selectedDepartment as keyof typeof classes]?.map((className) => (\n            <Card \n              key={className}\n              className=\"cursor-pointer transition-all duration-300 hover:shadow-lg hover:scale-[1.02]\"\n              onClick={() => handleClassSelect(className)}\n            >\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className={`w-10 h-10 ${selectedDept?.color}/10 rounded-lg flex items-center justify-center`}>\n                    <Icon className={`h-5 w-5 text-${selectedDept?.color?.split('-')[1]}-500`} />\n                  </div>\n                  <Badge variant=\"secondary\">Active</Badge>\n                </div>\n                <h3 className=\"font-semibold text-foreground mb-1\">{className}</h3>\n                <p className=\"text-sm text-muted-foreground\">Click to manage students</p>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  // Student List View\n  const selectedDept = departments.find(d => d.id === selectedDepartment);\n  \n  return (\n    <div className=\"p-4 sm:p-6 lg:p-8\">\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleBack}\n              className=\"p-2\"\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Button>\n            <div>\n              <h1 className=\"text-3xl font-bold text-foreground\">\n                {selectedClass} Students\n              </h1>\n              <p className=\"text-muted-foreground\">\n                {selectedDept?.name} â€¢ {filteredStudents.length} students\n              </p>\n            </div>\n          </div>\n          \n          <Button onClick={() => setShowAddModal(true)} data-testid=\"button-add-student\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Student\n          </Button>\n        </div>\n\n        {/* Search */}\n        <div className=\"relative max-w-md\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search students...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search-students\"\n          />\n        </div>\n      </div>\n\n      {/* Student List */}\n      {loading ? (\n        <div className=\"flex items-center justify-center py-12\">\n          <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin\"></div>\n        </div>\n      ) : filteredStudents.length > 0 ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {filteredStudents.map((student) => (\n            <Card key={student.id} className=\"transition-all duration-300 hover:shadow-lg\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-12 h-12 bg-primary rounded-full flex items-center justify-center\">\n                      <span className=\"text-primary-foreground font-medium\">\n                        {student.name.split(' ').map(n => n[0]).join('').toUpperCase()}\n                      </span>\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold text-foreground\">{student.name}</h3>\n                      <p className=\"text-sm text-muted-foreground\">{student.rollNumber}</p>\n                    </div>\n                  </div>\n                  \n                  <Button variant=\"ghost\" size=\"sm\" className=\"p-1\">\n                    <MoreVertical className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n                \n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Email:</span>\n                    <span className=\"text-foreground\">{student.email}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Year:</span>\n                    <span className=\"text-foreground\">{student.year}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Semester:</span>\n                    <span className=\"text-foreground\">{student.semester}</span>\n                  </div>\n                </div>\n                \n                <div className=\"flex space-x-2 mt-4\">\n                  <Button variant=\"outline\" size=\"sm\" className=\"flex-1\">\n                    <Edit className=\"h-3 w-3 mr-1\" />\n                    Edit\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" className=\"flex-1 text-destructive hover:bg-destructive hover:text-destructive-foreground\">\n                    <Trash2 className=\"h-3 w-3 mr-1\" />\n                    Delete\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Users className=\"h-8 w-8 text-muted-foreground\" />\n            </div>\n            <h3 className=\"text-lg font-medium text-foreground mb-2\">No students found</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              {searchTerm ? 'No students match your search criteria.' : 'Get started by adding your first student.'}\n            </p>\n            <Button onClick={() => setShowAddModal(true)}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Student\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Add Student Modal */}\n      <Dialog open={showAddModal} onOpenChange={setShowAddModal}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Add New Student</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"student-name\">Full Name</Label>\n                <Input id=\"student-name\" placeholder=\"John Doe\" />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"roll-number\">Roll Number</Label>\n                <Input id=\"roll-number\" placeholder=\"CSE2024001\" />\n              </div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"student-email\">Email Address</Label>\n              <Input id=\"student-email\" type=\"email\" placeholder=\"john.doe@student.edu\" />\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"year\">Year</Label>\n                <Select>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select year\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"1\">1st Year</SelectItem>\n                    <SelectItem value=\"2\">2nd Year</SelectItem>\n                    <SelectItem value=\"3\">3rd Year</SelectItem>\n                    <SelectItem value=\"4\">4th Year</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"semester\">Semester</Label>\n                <Select>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select semester\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"1\">1st Semester</SelectItem>\n                    <SelectItem value=\"2\">2nd Semester</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"phone\">Phone Number</Label>\n              <Input id=\"phone\" placeholder=\"+1 (555) 123-4567\" />\n            </div>\n            \n            <div className=\"flex space-x-2 pt-4\">\n              <Button variant=\"outline\" onClick={() => setShowAddModal(false)} className=\"flex-1\">\n                Cancel\n              </Button>\n              <Button className=\"flex-1\">Add Student</Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default StudentManager;\n","size_bytes":15973},"client/src/pages/timetable-generator.tsx":{"content":"import React from 'react';\nimport { TimetableGenerator } from '@/components/timetable/TimetableGenerator';\n\nconst TimetableGeneratorPage: React.FC = () => {\n  return (\n    <div className=\"p-4 sm:p-6 lg:p-8\">\n      <TimetableGenerator />\n    </div>\n  );\n};\n\nexport default TimetableGeneratorPage;\n","size_bytes":296},"client/src/services/exportService.ts":{"content":"import jsPDF from 'jspdf';\nimport 'jspdf-autotable';\nimport * as XLSX from 'xlsx';\nimport { TimetableEntry, Timetable } from '@/types';\n\ndeclare module 'jspdf' {\n  interface jsPDF {\n    autoTable: (options: any) => jsPDF;\n  }\n}\n\nclass ExportService {\n  /**\n   * Export timetable to PDF\n   */\n  async exportTimetableToPDF(timetable: Timetable): Promise<void> {\n    const doc = new jsPDF('landscape');\n    \n    // Add title\n    doc.setFontSize(20);\n    doc.text(`Timetable - ${timetable.class}`, 20, 20);\n    \n    // Add metadata\n    doc.setFontSize(12);\n    doc.text(`Department: ${timetable.department}`, 20, 35);\n    doc.text(`Semester: ${timetable.semester}`, 20, 45);\n    doc.text(`Academic Year: ${timetable.academicYear}`, 20, 55);\n    doc.text(`Generated: ${new Date(timetable.generatedAt).toLocaleDateString()}`, 20, 65);\n\n    // Prepare timetable data\n    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];\n    const timeSlots = this.getUniqueTimeSlots(timetable.entries);\n    \n    // Create table data\n    const tableData = [];\n    \n    // Header row\n    const header = ['Time', ...days];\n    tableData.push(header);\n    \n    // Data rows\n    timeSlots.forEach(timeSlot => {\n      const row = [timeSlot];\n      days.forEach(day => {\n        const entry = timetable.entries.find(e => \n          e.day === day && e.startTime === timeSlot\n        );\n        const cellData = entry \n          ? `${entry.subjectName}\\n${entry.facultyName}\\n${entry.room}`\n          : '-';\n        row.push(cellData);\n      });\n      tableData.push(row);\n    });\n\n    // Add table\n    doc.autoTable({\n      head: [header],\n      body: tableData.slice(1),\n      startY: 75,\n      styles: {\n        fontSize: 8,\n        cellPadding: 3\n      },\n      headStyles: {\n        fillColor: [33, 150, 243],\n        textColor: 255\n      },\n      alternateRowStyles: {\n        fillColor: [245, 245, 245]\n      }\n    });\n\n    // Add conflicts if any\n    if (timetable.conflicts.length > 0) {\n      const finalY = (doc as any).lastAutoTable.finalY + 20;\n      doc.setFontSize(16);\n      doc.text('Conflicts:', 20, finalY);\n      \n      const conflictData = timetable.conflicts.map((conflict, index) => [\n        index + 1,\n        conflict.type,\n        conflict.severity,\n        conflict.description\n      ]);\n\n      doc.autoTable({\n        head: [['#', 'Type', 'Severity', 'Description']],\n        body: conflictData,\n        startY: finalY + 10,\n        styles: {\n          fontSize: 8,\n          cellPadding: 3\n        },\n        headStyles: {\n          fillColor: [244, 67, 54],\n          textColor: 255\n        }\n      });\n    }\n\n    // Save the PDF\n    doc.save(`timetable_${timetable.class}_${timetable.semester}.pdf`);\n  }\n\n  /**\n   * Export timetable to Excel\n   */\n  async exportTimetableToExcel(timetable: Timetable): Promise<void> {\n    const workbook = XLSX.utils.book_new();\n    \n    // Main timetable sheet\n    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];\n    const timeSlots = this.getUniqueTimeSlots(timetable.entries);\n    \n    // Prepare worksheet data\n    const worksheetData = [];\n    \n    // Header row\n    worksheetData.push(['Time', ...days]);\n    \n    // Data rows\n    timeSlots.forEach(timeSlot => {\n      const row = [timeSlot];\n      days.forEach(day => {\n        const entry = timetable.entries.find(e => \n          e.day === day && e.startTime === timeSlot\n        );\n        const cellData = entry \n          ? `${entry.subjectName}\\n${entry.facultyName}\\n${entry.room}`\n          : '-';\n        row.push(cellData);\n      });\n      worksheetData.push(row);\n    });\n\n    const worksheet = XLSX.utils.aoa_to_sheet(worksheetData);\n    \n    // Set column widths\n    worksheet['!cols'] = [\n      { wch: 15 }, // Time column\n      { wch: 20 }, // Monday\n      { wch: 20 }, // Tuesday\n      { wch: 20 }, // Wednesday\n      { wch: 20 }, // Thursday\n      { wch: 20 }  // Friday\n    ];\n\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Timetable');\n\n    // Add conflicts sheet if any\n    if (timetable.conflicts.length > 0) {\n      const conflictData = [\n        ['Type', 'Severity', 'Description', 'Status'],\n        ...timetable.conflicts.map(conflict => [\n          conflict.type,\n          conflict.severity,\n          conflict.description,\n          conflict.resolved ? 'Resolved' : 'Unresolved'\n        ])\n      ];\n      \n      const conflictWorksheet = XLSX.utils.aoa_to_sheet(conflictData);\n      conflictWorksheet['!cols'] = [\n        { wch: 15 },\n        { wch: 15 },\n        { wch: 50 },\n        { wch: 15 }\n      ];\n      \n      XLSX.utils.book_append_sheet(workbook, conflictWorksheet, 'Conflicts');\n    }\n\n    // Add faculty workload sheet\n    const facultyWorkload = this.calculateFacultyWorkload(timetable.entries);\n    if (facultyWorkload.length > 0) {\n      const workloadData = [\n        ['Faculty', 'Total Hours', 'Subjects', 'Classes'],\n        ...facultyWorkload\n      ];\n      \n      const workloadWorksheet = XLSX.utils.aoa_to_sheet(workloadData);\n      workloadWorksheet['!cols'] = [\n        { wch: 20 },\n        { wch: 15 },\n        { wch: 30 },\n        { wch: 20 }\n      ];\n      \n      XLSX.utils.book_append_sheet(workbook, workloadWorksheet, 'Faculty Workload');\n    }\n\n    // Add metadata sheet\n    const metadataData = [\n      ['Property', 'Value'],\n      ['Class', timetable.class],\n      ['Department', timetable.department],\n      ['Semester', timetable.semester],\n      ['Academic Year', timetable.academicYear],\n      ['Generated On', new Date(timetable.generatedAt).toLocaleString()],\n      ['Total Entries', timetable.entries.length],\n      ['Conflicts', timetable.conflicts.length]\n    ];\n    \n    const metadataWorksheet = XLSX.utils.aoa_to_sheet(metadataData);\n    metadataWorksheet['!cols'] = [{ wch: 20 }, { wch: 30 }];\n    \n    XLSX.utils.book_append_sheet(workbook, metadataWorksheet, 'Info');\n\n    // Save the file\n    XLSX.writeFile(workbook, `timetable_${timetable.class}_${timetable.semester}.xlsx`);\n  }\n\n  /**\n   * Export faculty list to PDF\n   */\n  async exportFacultyListToPDF(faculty: any[], instituteName: string): Promise<void> {\n    const doc = new jsPDF();\n    \n    doc.setFontSize(20);\n    doc.text(`Faculty List - ${instituteName}`, 20, 20);\n    \n    doc.setFontSize(12);\n    doc.text(`Generated: ${new Date().toLocaleDateString()}`, 20, 35);\n\n    const tableData = faculty.map((f, index) => [\n      index + 1,\n      f.name,\n      f.email,\n      f.department,\n      f.classes.join(', '),\n      f.subjects.join(', ')\n    ]);\n\n    doc.autoTable({\n      head: [['#', 'Name', 'Email', 'Department', 'Classes', 'Subjects']],\n      body: tableData,\n      startY: 45,\n      styles: {\n        fontSize: 8,\n        cellPadding: 3\n      },\n      headStyles: {\n        fillColor: [33, 150, 243],\n        textColor: 255\n      }\n    });\n\n    doc.save(`faculty_list_${new Date().toISOString().split('T')[0]}.pdf`);\n  }\n\n  /**\n   * Export student list to Excel\n   */\n  async exportStudentListToExcel(students: any[], className: string): Promise<void> {\n    const workbook = XLSX.utils.book_new();\n    \n    const worksheetData = [\n      ['Roll Number', 'Name', 'Email', 'Department', 'Class', 'Year', 'Semester', 'Phone', 'Parent Contact'],\n      ...students.map(student => [\n        student.rollNumber,\n        student.name,\n        student.email,\n        student.department,\n        student.class,\n        student.year,\n        student.semester,\n        student.phoneNumber || '',\n        student.parentContact || ''\n      ])\n    ];\n\n    const worksheet = XLSX.utils.aoa_to_sheet(worksheetData);\n    \n    worksheet['!cols'] = [\n      { wch: 15 }, { wch: 25 }, { wch: 30 }, { wch: 15 },\n      { wch: 15 }, { wch: 8 }, { wch: 10 }, { wch: 15 }, { wch: 15 }\n    ];\n\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Students');\n\n    XLSX.writeFile(workbook, `students_${className}_${new Date().toISOString().split('T')[0]}.xlsx`);\n  }\n\n  /**\n   * Get unique time slots from timetable entries\n   */\n  private getUniqueTimeSlots(entries: TimetableEntry[]): string[] {\n    const timeSlots = Array.from(new Set(entries.map(e => e.startTime)));\n    return timeSlots.sort((a, b) => {\n      const timeA = new Date(`1970-01-01T${a}:00`);\n      const timeB = new Date(`1970-01-01T${b}:00`);\n      return timeA.getTime() - timeB.getTime();\n    });\n  }\n\n  /**\n   * Calculate faculty workload from timetable entries\n   */\n  private calculateFacultyWorkload(entries: TimetableEntry[]): any[] {\n    const facultyMap = new Map();\n    \n    entries.forEach(entry => {\n      if (!facultyMap.has(entry.facultyId)) {\n        facultyMap.set(entry.facultyId, {\n          name: entry.facultyName,\n          hours: 0,\n          subjects: new Set(),\n          classes: new Set()\n        });\n      }\n      \n      const faculty = facultyMap.get(entry.facultyId);\n      faculty.hours++;\n      faculty.subjects.add(entry.subjectName);\n      faculty.classes.add(entry.class);\n    });\n\n    return Array.from(facultyMap.values()).map(faculty => [\n      faculty.name,\n      faculty.hours,\n      Array.from(faculty.subjects).join(', '),\n      Array.from(faculty.classes).join(', ')\n    ]);\n  }\n}\n\nexport const exportService = new ExportService();\n","size_bytes":9211},"client/src/services/firestoreService.ts":{"content":"import { \n  collection, \n  doc, \n  getDocs, \n  getDoc, \n  addDoc, \n  updateDoc, \n  deleteDoc, \n  query, \n  where, \n  orderBy, \n  limit \n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { \n  Institute, \n  Faculty, \n  Student, \n  Course, \n  Timetable, \n  User,\n  FirestoreCollections \n} from '@/types';\n\nclass FirestoreService {\n  // Generic CRUD operations\n  private async getCollection<T extends keyof FirestoreCollections>(\n    collectionName: T\n  ) {\n    return collection(db, collectionName);\n  }\n\n  private async getDocument<T extends keyof FirestoreCollections>(\n    collectionName: T,\n    id: string\n  ): Promise<FirestoreCollections[T] | null> {\n    try {\n      const docRef = doc(db, collectionName, id);\n      const docSnap = await getDoc(docRef);\n      \n      if (docSnap.exists()) {\n        return { id: docSnap.id, ...docSnap.data() } as FirestoreCollections[T];\n      }\n      return null;\n    } catch (error) {\n      console.error(`Error getting ${collectionName} document:`, error);\n      throw error;\n    }\n  }\n\n  // Institute operations\n  async getInstitutes(): Promise<Institute[]> {\n    try {\n      const querySnapshot = await getDocs(collection(db, 'institutes'));\n      return querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      })) as Institute[];\n    } catch (error) {\n      console.error('Error getting institutes:', error);\n      throw error;\n    }\n  }\n\n  async getInstitute(id: string): Promise<Institute | null> {\n    return this.getDocument('institutes', id);\n  }\n\n  async createInstitute(institute: Omit<Institute, 'id'>): Promise<string> {\n    try {\n      const docRef = await addDoc(collection(db, 'institutes'), institute);\n      return docRef.id;\n    } catch (error) {\n      console.error('Error creating institute:', error);\n      throw error;\n    }\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | null> {\n    return this.getDocument('users', id);\n  }\n\n  async createUser(user: Omit<User, 'id'>): Promise<string> {\n    try {\n      const docRef = await addDoc(collection(db, 'users'), user);\n      return docRef.id;\n    } catch (error) {\n      console.error('Error creating user:', error);\n      throw error;\n    }\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<void> {\n    try {\n      const docRef = doc(db, 'users', id);\n      await updateDoc(docRef, updates);\n    } catch (error) {\n      console.error('Error updating user:', error);\n      throw error;\n    }\n  }\n\n  // Faculty operations\n  async getFacultyByInstitute(instituteId: string): Promise<Faculty[]> {\n    try {\n      const q = query(\n        collection(db, 'faculty'),\n        where('instituteId', '==', instituteId),\n        orderBy('name')\n      );\n      const querySnapshot = await getDocs(q);\n      return querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      })) as Faculty[];\n    } catch (error) {\n      console.error('Error getting faculty:', error);\n      throw error;\n    }\n  }\n\n  async getFacultyByDepartment(instituteId: string, department: string): Promise<Faculty[]> {\n    try {\n      const q = query(\n        collection(db, 'faculty'),\n        where('instituteId', '==', instituteId),\n        where('department', '==', department),\n        orderBy('name')\n      );\n      const querySnapshot = await getDocs(q);\n      return querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      })) as Faculty[];\n    } catch (error) {\n      console.error('Error getting faculty by department:', error);\n      throw error;\n    }\n  }\n\n  async createFaculty(faculty: Omit<Faculty, 'id'>): Promise<string> {\n    try {\n      const docRef = await addDoc(collection(db, 'faculty'), {\n        ...faculty,\n        createdAt: new Date()\n      });\n      return docRef.id;\n    } catch (error) {\n      console.error('Error creating faculty:', error);\n      throw error;\n    }\n  }\n\n  async updateFaculty(id: string, updates: Partial<Faculty>): Promise<void> {\n    try {\n      const docRef = doc(db, 'faculty', id);\n      await updateDoc(docRef, updates);\n    } catch (error) {\n      console.error('Error updating faculty:', error);\n      throw error;\n    }\n  }\n\n  async deleteFaculty(id: string): Promise<void> {\n    try {\n      await deleteDoc(doc(db, 'faculty', id));\n    } catch (error) {\n      console.error('Error deleting faculty:', error);\n      throw error;\n    }\n  }\n\n  // Student operations\n  async getStudentsByClass(instituteId: string, department: string, className: string): Promise<Student[]> {\n    try {\n      const q = query(\n        collection(db, 'students'),\n        where('instituteId', '==', instituteId),\n        where('department', '==', department),\n        where('class', '==', className),\n        orderBy('rollNumber')\n      );\n      const querySnapshot = await getDocs(q);\n      return querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      })) as Student[];\n    } catch (error) {\n      console.error('Error getting students by class:', error);\n      throw error;\n    }\n  }\n\n  async createStudent(student: Omit<Student, 'id'>): Promise<string> {\n    try {\n      const docRef = await addDoc(collection(db, 'students'), {\n        ...student,\n        createdAt: new Date()\n      });\n      return docRef.id;\n    } catch (error) {\n      console.error('Error creating student:', error);\n      throw error;\n    }\n  }\n\n  async updateStudent(id: string, updates: Partial<Student>): Promise<void> {\n    try {\n      const docRef = doc(db, 'students', id);\n      await updateDoc(docRef, updates);\n    } catch (error) {\n      console.error('Error updating student:', error);\n      throw error;\n    }\n  }\n\n  async deleteStudent(id: string): Promise<void> {\n    try {\n      await deleteDoc(doc(db, 'students', id));\n    } catch (error) {\n      console.error('Error deleting student:', error);\n      throw error;\n    }\n  }\n\n  // Course operations\n  async getCoursesByDepartment(instituteId: string, department: string): Promise<Course[]> {\n    try {\n      const q = query(\n        collection(db, 'courses'),\n        where('instituteId', '==', instituteId),\n        where('department', '==', department),\n        orderBy('name')\n      );\n      const querySnapshot = await getDocs(q);\n      return querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      })) as Course[];\n    } catch (error) {\n      console.error('Error getting courses by department:', error);\n      throw error;\n    }\n  }\n\n  async createCourse(course: Omit<Course, 'id'>): Promise<string> {\n    try {\n      const docRef = await addDoc(collection(db, 'courses'), {\n        ...course,\n        createdAt: new Date()\n      });\n      return docRef.id;\n    } catch (error) {\n      console.error('Error creating course:', error);\n      throw error;\n    }\n  }\n\n  async updateCourse(id: string, updates: Partial<Course>): Promise<void> {\n    try {\n      const docRef = doc(db, 'courses', id);\n      await updateDoc(docRef, updates);\n    } catch (error) {\n      console.error('Error updating course:', error);\n      throw error;\n    }\n  }\n\n  async deleteCourse(id: string): Promise<void> {\n    try {\n      await deleteDoc(doc(db, 'courses', id));\n    } catch (error) {\n      console.error('Error deleting course:', error);\n      throw error;\n    }\n  }\n\n  // Timetable operations\n  async getTimetablesByInstitute(instituteId: string): Promise<Timetable[]> {\n    try {\n      const q = query(\n        collection(db, 'timetables'),\n        where('instituteId', '==', instituteId),\n        orderBy('generatedAt', 'desc')\n      );\n      const querySnapshot = await getDocs(q);\n      return querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      })) as Timetable[];\n    } catch (error) {\n      console.error('Error getting timetables:', error);\n      throw error;\n    }\n  }\n\n  async getTimetableByClass(instituteId: string, className: string, semester: string): Promise<Timetable | null> {\n    try {\n      const q = query(\n        collection(db, 'timetables'),\n        where('instituteId', '==', instituteId),\n        where('class', '==', className),\n        where('semester', '==', semester),\n        orderBy('generatedAt', 'desc'),\n        limit(1)\n      );\n      const querySnapshot = await getDocs(q);\n      \n      if (!querySnapshot.empty) {\n        const doc = querySnapshot.docs[0];\n        return { id: doc.id, ...doc.data() } as Timetable;\n      }\n      return null;\n    } catch (error) {\n      console.error('Error getting timetable by class:', error);\n      throw error;\n    }\n  }\n\n  async saveTimetable(timetable: Omit<Timetable, 'id'>): Promise<string> {\n    try {\n      const docRef = await addDoc(collection(db, 'timetables'), {\n        ...timetable,\n        generatedAt: new Date()\n      });\n      return docRef.id;\n    } catch (error) {\n      console.error('Error saving timetable:', error);\n      throw error;\n    }\n  }\n\n  async updateTimetable(id: string, updates: Partial<Timetable>): Promise<void> {\n    try {\n      const docRef = doc(db, 'timetables', id);\n      await updateDoc(docRef, updates);\n    } catch (error) {\n      console.error('Error updating timetable:', error);\n      throw error;\n    }\n  }\n\n  // Statistics\n  async getStatistics(instituteId: string) {\n    try {\n      const [studentsSnapshot, facultySnapshot, coursesSnapshot, timetablesSnapshot] = await Promise.all([\n        getDocs(query(collection(db, 'students'), where('instituteId', '==', instituteId))),\n        getDocs(query(collection(db, 'faculty'), where('instituteId', '==', instituteId))),\n        getDocs(query(collection(db, 'courses'), where('instituteId', '==', instituteId))),\n        getDocs(query(collection(db, 'timetables'), where('instituteId', '==', instituteId)))\n      ]);\n\n      return {\n        students: studentsSnapshot.size,\n        faculty: facultySnapshot.size,\n        courses: coursesSnapshot.size,\n        timetables: timetablesSnapshot.size\n      };\n    } catch (error) {\n      console.error('Error getting statistics:', error);\n      throw error;\n    }\n  }\n}\n\nexport const firestoreService = new FirestoreService();\n","size_bytes":10109},"client/src/services/timetableService.ts":{"content":"import { Faculty, Course, TimetableEntry, Conflict, TimeSlot } from '@/types';\n\ninterface TimetableConstraints {\n  faculty: Faculty[];\n  courses: Course[];\n  timeSlots: TimeSlot[];\n  days: string[];\n  rooms: string[];\n}\n\ninterface TimetableRequest {\n  class: string;\n  department: string;\n  semester: string;\n  academicYear: string;\n  constraints: TimetableConstraints;\n}\n\nclass TimetableService {\n  private readonly DAYS = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];\n  \n  /**\n   * Generate a timetable with intelligent conflict detection\n   */\n  async generateTimetable(request: TimetableRequest): Promise<{\n    entries: TimetableEntry[];\n    conflicts: Conflict[];\n  }> {\n    const { constraints } = request;\n    const entries: TimetableEntry[] = [];\n    const conflicts: Conflict[] = [];\n    const occupiedSlots: Map<string, string[]> = new Map(); // day-time -> [facultyId, room]\n\n    // Initialize occupied slots\n    this.DAYS.forEach(day => {\n      constraints.timeSlots.forEach(slot => {\n        occupiedSlots.set(`${day}-${slot.id}`, []);\n      });\n    });\n\n    // Get relevant courses for the class\n    const classCourses = constraints.courses.filter(course => \n      course.department === request.department\n    );\n\n    // Generate entries for each course\n    for (const course of classCourses) {\n      const faculty = constraints.faculty.find(f => f.id === course.facultyId);\n      if (!faculty) {\n        conflicts.push({\n          type: 'teacher',\n          description: `No faculty assigned for course ${course.name}`,\n          severity: 'high',\n          resolved: false\n        });\n        continue;\n      }\n\n      // Check if faculty is assigned to this class\n      if (!faculty.classes.includes(request.class)) {\n        conflicts.push({\n          type: 'teacher',\n          description: `${faculty.name} is not assigned to class ${request.class}`,\n          severity: 'high',\n          resolved: false\n        });\n        continue;\n      }\n\n      // Try to assign time slots for this course\n      const slotsNeeded = this.calculateSlotsNeeded(course);\n      const assignedSlots = this.assignTimeSlots(\n        course,\n        faculty,\n        slotsNeeded,\n        occupiedSlots,\n        constraints,\n        request.class\n      );\n\n      entries.push(...assignedSlots.entries);\n      conflicts.push(...assignedSlots.conflicts);\n    }\n\n    return { entries, conflicts };\n  }\n\n  /**\n   * Calculate number of time slots needed based on course credits\n   */\n  private calculateSlotsNeeded(course: Course): number {\n    // Typically 1 credit = 1 hour per week\n    return Math.max(course.credits, 1);\n  }\n\n  /**\n   * Assign time slots for a specific course\n   */\n  private assignTimeSlots(\n    course: Course,\n    faculty: Faculty,\n    slotsNeeded: number,\n    occupiedSlots: Map<string, string[]>,\n    constraints: TimetableConstraints,\n    className: string\n  ): { entries: TimetableEntry[]; conflicts: Conflict[] } {\n    const entries: TimetableEntry[] = [];\n    const conflicts: Conflict[] = [];\n    let assignedSlots = 0;\n\n    // Try to assign slots across different days\n    for (const day of this.DAYS) {\n      if (assignedSlots >= slotsNeeded) break;\n\n      for (const timeSlot of constraints.timeSlots) {\n        if (assignedSlots >= slotsNeeded) break;\n\n        const slotKey = `${day}-${timeSlot.id}`;\n        const occupiedData = occupiedSlots.get(slotKey) || [];\n\n        // Check for faculty conflicts\n        if (occupiedData.includes(faculty.id)) {\n          conflicts.push({\n            type: 'teacher',\n            description: `${faculty.name} has conflicting schedule on ${day} at ${timeSlot.label}`,\n            severity: 'medium',\n            resolved: false\n          });\n          continue;\n        }\n\n        // Find available room\n        const availableRoom = this.findAvailableRoom(occupiedData, constraints.rooms);\n        if (!availableRoom) {\n          conflicts.push({\n            type: 'room',\n            description: `No room available on ${day} at ${timeSlot.label}`,\n            severity: 'high',\n            resolved: false\n          });\n          continue;\n        }\n\n        // Check for room conflicts\n        if (occupiedData.includes(availableRoom)) {\n          conflicts.push({\n            type: 'room',\n            description: `Room ${availableRoom} is already occupied on ${day} at ${timeSlot.label}`,\n            severity: 'high',\n            resolved: false\n          });\n          continue;\n        }\n\n        // Create timetable entry\n        const entry: TimetableEntry = {\n          id: `${course.id}-${day}-${timeSlot.id}`,\n          subjectId: course.id,\n          subjectName: course.name,\n          facultyId: faculty.id,\n          facultyName: faculty.name,\n          class: className,\n          room: availableRoom,\n          day,\n          timeSlot: timeSlot.id,\n          startTime: timeSlot.startTime,\n          endTime: timeSlot.endTime\n        };\n\n        entries.push(entry);\n        \n        // Mark slot as occupied\n        occupiedData.push(faculty.id, availableRoom);\n        occupiedSlots.set(slotKey, occupiedData);\n        \n        assignedSlots++;\n      }\n    }\n\n    // Check if all required slots were assigned\n    if (assignedSlots < slotsNeeded) {\n      conflicts.push({\n        type: 'preference',\n        description: `Could only assign ${assignedSlots}/${slotsNeeded} slots for ${course.name}`,\n        severity: 'medium',\n        resolved: false\n      });\n    }\n\n    return { entries, conflicts };\n  }\n\n  /**\n   * Find an available room for the time slot\n   */\n  private findAvailableRoom(occupiedData: string[], availableRooms: string[]): string | null {\n    for (const room of availableRooms) {\n      if (!occupiedData.includes(room)) {\n        return room;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Validate timetable for conflicts\n   */\n  async validateTimetable(entries: TimetableEntry[]): Promise<Conflict[]> {\n    const conflicts: Conflict[] = [];\n    const slotMap: Map<string, TimetableEntry[]> = new Map();\n\n    // Group entries by day-time slot\n    entries.forEach(entry => {\n      const key = `${entry.day}-${entry.timeSlot}`;\n      if (!slotMap.has(key)) {\n        slotMap.set(key, []);\n      }\n      slotMap.get(key)!.push(entry);\n    });\n\n    // Check for conflicts in each time slot\n    slotMap.forEach((slotEntries, slotKey) => {\n      if (slotEntries.length > 1) {\n        const facultyIds = new Set<string>();\n        const rooms = new Set<string>();\n\n        slotEntries.forEach(entry => {\n          // Check for faculty double-booking\n          if (facultyIds.has(entry.facultyId)) {\n            conflicts.push({\n              type: 'teacher',\n              description: `${entry.facultyName} is double-booked at ${slotKey.replace('-', ' ')}`,\n              severity: 'high',\n              resolved: false\n            });\n          }\n          facultyIds.add(entry.facultyId);\n\n          // Check for room double-booking\n          if (rooms.has(entry.room)) {\n            conflicts.push({\n              type: 'room',\n              description: `Room ${entry.room} is double-booked at ${slotKey.replace('-', ' ')}`,\n              severity: 'high',\n              resolved: false\n            });\n          }\n          rooms.add(entry.room);\n        });\n      }\n    });\n\n    return conflicts;\n  }\n\n  /**\n   * Optimize timetable to minimize conflicts\n   */\n  async optimizeTimetable(entries: TimetableEntry[], constraints: TimetableConstraints): Promise<{\n    optimizedEntries: TimetableEntry[];\n    conflicts: Conflict[];\n  }> {\n    // Implementation for genetic algorithm or other optimization techniques\n    // For now, return the original entries with validation\n    const conflicts = await this.validateTimetable(entries);\n    \n    return {\n      optimizedEntries: entries,\n      conflicts\n    };\n  }\n\n  /**\n   * Get faculty workload distribution\n   */\n  async getFacultyWorkload(facultyId: string, entries: TimetableEntry[]): Promise<{\n    totalHours: number;\n    dailyHours: Record<string, number>;\n    subjects: string[];\n  }> {\n    const facultyEntries = entries.filter(entry => entry.facultyId === facultyId);\n    \n    const dailyHours: Record<string, number> = {};\n    const subjects = new Set<string>();\n\n    facultyEntries.forEach(entry => {\n      if (!dailyHours[entry.day]) {\n        dailyHours[entry.day] = 0;\n      }\n      dailyHours[entry.day]++;\n      subjects.add(entry.subjectName);\n    });\n\n    return {\n      totalHours: facultyEntries.length,\n      dailyHours,\n      subjects: Array.from(subjects)\n    };\n  }\n}\n\nexport const timetableService = new TimetableService();\n","size_bytes":8621},"client/src/types/index.ts":{"content":"export interface Institute {\n  id: string;\n  name: string;\n  domain: string;\n  address?: string;\n  settings?: InstituteSettings;\n  createdAt: Date;\n}\n\nexport interface InstituteSettings {\n  timeSlots: TimeSlot[];\n  departments: string[];\n  academicYear: string;\n  semester: string;\n}\n\nexport interface TimeSlot {\n  id: string;\n  startTime: string;\n  endTime: string;\n  label: string;\n}\n\nexport interface Faculty {\n  id: string;\n  name: string;\n  email: string;\n  department: string;\n  classes: string[];\n  subjects: string[];\n  phoneNumber?: string;\n  profilePhoto?: string;\n  instituteId: string;\n  createdAt: Date;\n}\n\nexport interface Student {\n  id: string;\n  name: string;\n  email: string;\n  rollNumber: string;\n  department: string;\n  class: string;\n  year: number;\n  semester: number;\n  phoneNumber?: string;\n  parentContact?: string;\n  profilePhoto?: string;\n  instituteId: string;\n  createdAt: Date;\n}\n\nexport interface Course {\n  id: string;\n  name: string;\n  code: string;\n  department: string;\n  credits: number;\n  semester: number;\n  year: number;\n  facultyId: string;\n  assignments: Assignment[];\n  instituteId: string;\n  createdAt: Date;\n}\n\nexport interface Assignment {\n  id: string;\n  title: string;\n  description: string;\n  dueDate: Date;\n  maxMarks: number;\n  submissions: Submission[];\n}\n\nexport interface Submission {\n  studentId: string;\n  marks?: number;\n  submittedAt?: Date;\n  feedback?: string;\n}\n\nexport interface TimetableEntry {\n  id: string;\n  subjectId: string;\n  subjectName: string;\n  facultyId: string;\n  facultyName: string;\n  class: string;\n  room: string;\n  day: string;\n  timeSlot: string;\n  startTime: string;\n  endTime: string;\n}\n\nexport interface Timetable {\n  id: string;\n  class: string;\n  department: string;\n  semester: string;\n  academicYear: string;\n  entries: TimetableEntry[];\n  conflicts: Conflict[];\n  generatedAt: Date;\n  instituteId: string;\n}\n\nexport interface Conflict {\n  type: 'teacher' | 'room' | 'preference';\n  description: string;\n  severity: 'high' | 'medium' | 'low';\n  resolved: boolean;\n}\n\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n  role: 'faculty' | 'admin';\n  instituteId: string;\n  profilePhoto?: string;\n  lastLoginAt: Date;\n}\n\nexport interface AuthState {\n  user: User | null;\n  institute: Institute | null;\n  loading: boolean;\n  error: string | null;\n}\n\nexport interface FirestoreCollections {\n  institutes: Institute;\n  faculty: Faculty;\n  students: Student;\n  courses: Course;\n  timetables: Timetable;\n  users: User;\n}\n","size_bytes":2521},"client/src/utils/validation.ts":{"content":"import { z } from 'zod';\n\n// Email domain validation\nexport const validateEmailDomain = (email: string, instituteDomain: string): boolean => {\n  const emailDomain = email.substring(email.indexOf('@'));\n  return emailDomain === instituteDomain;\n};\n\n// Student validation schemas\nexport const studentSchema = z.object({\n  name: z.string().min(2, 'Name must be at least 2 characters').max(100, 'Name must be less than 100 characters'),\n  email: z.string().email('Invalid email address'),\n  rollNumber: z.string().min(3, 'Roll number must be at least 3 characters').max(20, 'Roll number must be less than 20 characters'),\n  department: z.string().min(1, 'Department is required'),\n  class: z.string().min(1, 'Class is required'),\n  year: z.number().min(1, 'Year must be at least 1').max(4, 'Year must be at most 4'),\n  semester: z.number().min(1, 'Semester must be at least 1').max(2, 'Semester must be at most 2'),\n  phoneNumber: z.string().optional(),\n  parentContact: z.string().optional(),\n});\n\n// Faculty validation schemas\nexport const facultySchema = z.object({\n  name: z.string().min(2, 'Name must be at least 2 characters').max(100, 'Name must be less than 100 characters'),\n  email: z.string().email('Invalid email address'),\n  department: z.string().min(1, 'Department is required'),\n  classes: z.array(z.string()).min(1, 'At least one class must be assigned'),\n  subjects: z.array(z.string()).min(1, 'At least one subject must be assigned'),\n  phoneNumber: z.string().optional(),\n});\n\n// Course validation schemas\nexport const courseSchema = z.object({\n  name: z.string().min(2, 'Course name must be at least 2 characters').max(100, 'Course name must be less than 100 characters'),\n  code: z.string().min(3, 'Course code must be at least 3 characters').max(20, 'Course code must be less than 20 characters'),\n  department: z.string().min(1, 'Department is required'),\n  credits: z.number().min(1, 'Credits must be at least 1').max(10, 'Credits must be at most 10'),\n  semester: z.number().min(1, 'Semester must be at least 1').max(2, 'Semester must be at most 2'),\n  year: z.number().min(1, 'Year must be at least 1').max(4, 'Year must be at most 4'),\n  facultyId: z.string().min(1, 'Faculty assignment is required'),\n});\n\n// Institute validation schemas\nexport const instituteSchema = z.object({\n  name: z.string().min(3, 'Institute name must be at least 3 characters').max(200, 'Institute name must be less than 200 characters'),\n  domain: z.string().regex(/^@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/, 'Invalid email domain format (e.g., @university.edu)'),\n  address: z.string().optional(),\n});\n\n// Authentication validation schemas\nexport const signInSchema = z.object({\n  email: z.string().email('Invalid email address'),\n  password: z.string().min(6, 'Password must be at least 6 characters'),\n});\n\n// Assignment validation schemas\nexport const assignmentSchema = z.object({\n  title: z.string().min(3, 'Assignment title must be at least 3 characters').max(200, 'Assignment title must be less than 200 characters'),\n  description: z.string().min(10, 'Assignment description must be at least 10 characters').max(1000, 'Assignment description must be less than 1000 characters'),\n  dueDate: z.date().min(new Date(), 'Due date must be in the future'),\n  maxMarks: z.number().min(1, 'Maximum marks must be at least 1').max(1000, 'Maximum marks must be at most 1000'),\n});\n\n// Timetable validation schemas\nexport const timetableEntrySchema = z.object({\n  subjectId: z.string().min(1, 'Subject is required'),\n  facultyId: z.string().min(1, 'Faculty is required'),\n  class: z.string().min(1, 'Class is required'),\n  room: z.string().min(1, 'Room is required'),\n  day: z.enum(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']),\n  timeSlot: z.string().min(1, 'Time slot is required'),\n  startTime: z.string().regex(/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/, 'Invalid start time format'),\n  endTime: z.string().regex(/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/, 'Invalid end time format'),\n});\n\n// Utility validation functions\nexport const validatePhoneNumber = (phone: string): boolean => {\n  const phoneRegex = /^[\\+]?[1-9][\\d]{0,15}$/;\n  return phoneRegex.test(phone.replace(/\\s+/g, ''));\n};\n\nexport const validateRollNumber = (rollNumber: string, department: string): boolean => {\n  // Basic validation - can be customized based on institute requirements\n  const rollRegex = new RegExp(`^${department.toUpperCase()}[0-9]{4}[0-9]{3}$`, 'i');\n  return rollRegex.test(rollNumber);\n};\n\nexport const validateTimeSlot = (startTime: string, endTime: string): boolean => {\n  const start = new Date(`2000-01-01T${startTime}:00`);\n  const end = new Date(`2000-01-01T${endTime}:00`);\n  return end > start;\n};\n\nexport const validateClassCapacity = (currentStudents: number, maxCapacity: number = 60): boolean => {\n  return currentStudents < maxCapacity;\n};\n\nexport const validateAcademicYear = (year: string): boolean => {\n  const yearRegex = /^20[0-9]{2}-20[0-9]{2}$/;\n  if (!yearRegex.test(year)) return false;\n  \n  const [startYear, endYear] = year.split('-').map(Number);\n  return endYear === startYear + 1;\n};\n\n// Form validation helpers\nexport const getFieldError = (errors: any, fieldName: string): string | undefined => {\n  return errors?.[fieldName]?.message;\n};\n\nexport const hasFieldError = (errors: any, fieldName: string): boolean => {\n  return !!errors?.[fieldName];\n};\n\n// Type exports for form validation\nexport type StudentFormData = z.infer<typeof studentSchema>;\nexport type FacultyFormData = z.infer<typeof facultySchema>;\nexport type CourseFormData = z.infer<typeof courseSchema>;\nexport type InstituteFormData = z.infer<typeof instituteSchema>;\nexport type SignInFormData = z.infer<typeof signInSchema>;\nexport type AssignmentFormData = z.infer<typeof assignmentSchema>;\nexport type TimetableEntryFormData = z.infer<typeof timetableEntrySchema>;\n","size_bytes":5866},"client/src/components/auth/AuthScreen.tsx":{"content":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Separator } from '@/components/ui/separator';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useInstitute } from '@/contexts/InstituteContext';\nimport { validateEmailDomain } from '@/lib/firebase';\nimport { School, Eye, EyeOff } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\n\nconst signInSchema = z.object({\n  email: z.string().email('Invalid email address'),\n  password: z.string().min(6, 'Password must be at least 6 characters'),\n});\n\ntype SignInForm = z.infer<typeof signInSchema>;\n\nexport const AuthScreen: React.FC = () => {\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const { signIn, signInWithGoogle } = useAuth();\n  const { selectedInstitute } = useInstitute();\n  const { toast } = useToast();\n\n  const form = useForm<SignInForm>({\n    resolver: zodResolver(signInSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n    },\n  });\n\n  const handleEmailSignIn = async (data: SignInForm) => {\n    if (!selectedInstitute) {\n      toast({\n        title: \"Error\",\n        description: \"Please select an institute first.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate email domain\n    if (!validateEmailDomain(data.email, selectedInstitute.domain)) {\n      toast({\n        title: \"Invalid Email Domain\",\n        description: `Please use an email ending with ${selectedInstitute.domain}`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      await signIn(data.email, data.password);\n    } catch (error: any) {\n      toast({\n        title: \"Sign In Failed\",\n        description: error.message || \"Please check your credentials and try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleGoogleSignIn = async () => {\n    try {\n      setIsLoading(true);\n      await signInWithGoogle();\n    } catch (error: any) {\n      toast({\n        title: \"Google Sign In Failed\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex\">\n      <div className=\"flex-1 flex items-center justify-center p-4\">\n        <div className=\"max-w-md w-full\">\n          <div className=\"text-center mb-8\">\n            <div className=\"w-20 h-20 bg-primary rounded-3xl mx-auto mb-6 flex items-center justify-center\">\n              <School className=\"h-10 w-10 text-primary-foreground\" />\n            </div>\n            <h1 className=\"text-3xl font-bold text-foreground mb-2\">Welcome to EduManager</h1>\n            <p className=\"text-muted-foreground\">Sign in to your faculty account</p>\n            {selectedInstitute && (\n              <p className=\"text-sm text-muted-foreground mt-2\" data-testid=\"text-institute-domain\">\n                Domain: {selectedInstitute.domain}\n              </p>\n            )}\n          </div>\n          \n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-xl text-center\">Faculty Sign In</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={form.handleSubmit(handleEmailSignIn)} className=\"space-y-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email Address</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder={`faculty${selectedInstitute?.domain || '@institute.edu'}`}\n                    {...form.register('email')}\n                    data-testid=\"input-email\"\n                  />\n                  {form.formState.errors.email && (\n                    <p className=\"text-sm text-destructive\">{form.formState.errors.email.message}</p>\n                  )}\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\">Password</Label>\n                  <div className=\"relative\">\n                    <Input\n                      id=\"password\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      placeholder=\"â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢\"\n                      {...form.register('password')}\n                      data-testid=\"input-password\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"absolute right-2 top-1/2 -translate-y-1/2 h-8 w-8 p-0\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      data-testid=\"button-toggle-password\"\n                    >\n                      {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                    </Button>\n                  </div>\n                  {form.formState.errors.password && (\n                    <p className=\"text-sm text-destructive\">{form.formState.errors.password.message}</p>\n                  )}\n                </div>\n                \n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={isLoading}\n                  data-testid=\"button-sign-in\"\n                >\n                  {isLoading ? \"Signing In...\" : \"Sign In\"}\n                </Button>\n              </form>\n              \n              <div className=\"relative my-6\">\n                <div className=\"absolute inset-0 flex items-center\">\n                  <Separator />\n                </div>\n                <div className=\"relative flex justify-center text-sm\">\n                  <span className=\"bg-card px-4 text-muted-foreground\">Or continue with</span>\n                </div>\n              </div>\n              \n              <Button \n                variant=\"outline\" \n                className=\"w-full flex items-center space-x-2\" \n                onClick={handleGoogleSignIn}\n                disabled={isLoading}\n                data-testid=\"button-google-signin\"\n              >\n                <div className=\"w-5 h-5 rounded-full bg-primary flex items-center justify-center\">\n                  <span className=\"text-xs text-primary-foreground font-bold\">G</span>\n                </div>\n                <span>Sign in with Google</span>\n              </Button>\n              \n              <div className=\"text-center mt-6\">\n                <Button variant=\"link\" className=\"text-primary\" data-testid=\"link-forgot-password\">\n                  Forgot your password?\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n      \n      <div className=\"hidden lg:flex flex-1 bg-gradient-to-br from-primary to-primary/80 items-center justify-center p-12\">\n        <div className=\"text-center text-primary-foreground max-w-lg\">\n          <div className=\"w-64 h-64 mx-auto mb-8 bg-primary-foreground/20 rounded-3xl flex items-center justify-center\">\n            <School className=\"h-24 w-24\" />\n          </div>\n          <h2 className=\"text-3xl font-bold mb-4\">Manage Your Institution</h2>\n          <p className=\"text-xl opacity-90\">\n            Streamline student, faculty, and course management with powerful tools designed for modern educational institutions.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n","size_bytes":7803},"client/src/components/course/CourseManager.tsx":{"content":"import React from 'react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { BookOpen, Plus, FileText, TrendingUp, Award, Users } from 'lucide-react';\n\ninterface CourseManagerProps {\n  onBack?: () => void;\n}\n\nexport const CourseManager: React.FC<CourseManagerProps> = ({ onBack }) => {\n  const features = [\n    {\n      icon: BookOpen,\n      title: 'Course Creation',\n      description: 'Create and organize courses by departments'\n    },\n    {\n      icon: FileText,\n      title: 'Assignment Management',\n      description: 'Track assignments and submissions'\n    },\n    {\n      icon: TrendingUp,\n      title: 'Grade Tracking',\n      description: 'Monitor student performance and grades'\n    },\n    {\n      icon: Award,\n      title: 'Progress Reports',\n      description: 'Generate detailed progress reports'\n    }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\">Course Manager</h2>\n          <p className=\"text-muted-foreground\">Create and manage courses, assignments, and grades</p>\n        </div>\n        <Button data-testid=\"button-add-course\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Course\n        </Button>\n      </div>\n\n      {/* Coming Soon Card */}\n      <Card className=\"transition-all duration-300 hover:shadow-lg\">\n        <CardContent className=\"p-12 text-center\">\n          <div className=\"w-16 h-16 bg-purple-500/10 rounded-full flex items-center justify-center mx-auto mb-6\">\n            <BookOpen className=\"h-8 w-8 text-purple-500\" />\n          </div>\n          \n          <h3 className=\"text-2xl font-bold text-foreground mb-4\">Course Management System</h3>\n          <p className=\"text-muted-foreground text-lg mb-8 max-w-2xl mx-auto\">\n            Advanced course management features are being implemented. This will include \n            department-wise course creation, assignment and marks management, and comprehensive \n            progress tracking with detailed analytics and reporting.\n          </p>\n          \n          {/* Features Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            {features.map((feature, index) => {\n              const Icon = feature.icon;\n              return (\n                <div key={index} className=\"text-center\">\n                  <div className=\"w-12 h-12 bg-accent rounded-lg flex items-center justify-center mx-auto mb-3\">\n                    <Icon className=\"h-6 w-6 text-accent-foreground\" />\n                  </div>\n                  <h4 className=\"font-semibold text-foreground mb-2\">{feature.title}</h4>\n                  <p className=\"text-sm text-muted-foreground\">{feature.description}</p>\n                </div>\n              );\n            })}\n          </div>\n          \n          {/* Feature Badges */}\n          <div className=\"flex flex-wrap justify-center gap-2\">\n            <Badge variant=\"outline\" className=\"text-sm py-1 px-3\">Course Creation</Badge>\n            <Badge variant=\"outline\" className=\"text-sm py-1 px-3\">Assignment Management</Badge>\n            <Badge variant=\"outline\" className=\"text-sm py-1 px-3\">Grade Tracking</Badge>\n            <Badge variant=\"outline\" className=\"text-sm py-1 px-3\">Progress Reports</Badge>\n            <Badge variant=\"outline\" className=\"text-sm py-1 px-3\">Analytics Dashboard</Badge>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n","size_bytes":3599},"client/src/components/dashboard/DashboardStats.tsx":{"content":"import React from 'react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { TrendingUp, Users, UserCheck, BookOpen, Calendar } from 'lucide-react';\n\ninterface DashboardStatsProps {\n  stats: {\n    students: number;\n    faculty: number;\n    courses: number;\n    timetables: number;\n  };\n  loading: boolean;\n}\n\nexport const DashboardStats: React.FC<DashboardStatsProps> = ({ stats, loading }) => {\n  const statsCards = [\n    {\n      title: 'Total Students',\n      value: stats.students,\n      icon: Users,\n      color: 'bg-primary',\n      trend: '+12%',\n      testId: 'stat-students'\n    },\n    {\n      title: 'Faculty Members',\n      value: stats.faculty,\n      icon: UserCheck,\n      color: 'bg-green-500',\n      trend: '+3%',\n      testId: 'stat-faculty'\n    },\n    {\n      title: 'Active Courses',\n      value: stats.courses,\n      icon: BookOpen,\n      color: 'bg-purple-500',\n      trend: '+8%',\n      testId: 'stat-courses'\n    },\n    {\n      title: 'Timetables Generated',\n      value: stats.timetables,\n      icon: Calendar,\n      color: 'bg-orange-500',\n      trend: 'Updated',\n      testId: 'stat-timetables'\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n      {statsCards.map((card, index) => {\n        const Icon = card.icon;\n        \n        return (\n          <Card key={index} className=\"transition-all duration-300 hover:shadow-lg hover:scale-[1.02]\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className={`w-12 h-12 ${card.color}/10 rounded-xl flex items-center justify-center`}>\n                  <Icon className={`h-6 w-6 text-${card.color.split('-')[1]}-500`} />\n                </div>\n                <div className=\"flex items-center text-sm text-green-600\">\n                  {card.trend !== 'Updated' && <TrendingUp className=\"h-4 w-4 mr-1\" />}\n                  <span>{card.trend}</span>\n                </div>\n              </div>\n              \n              <h3 className=\"text-2xl font-bold text-foreground mb-1\" data-testid={card.testId}>\n                {loading ? '...' : card.value.toLocaleString()}\n              </h3>\n              <p className=\"text-sm text-muted-foreground\">{card.title}</p>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n};\n","size_bytes":2373},"client/src/components/dashboard/ManagementCards.tsx":{"content":"import React from 'react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Link } from 'wouter';\nimport { \n  Users, \n  UserCheck, \n  BookOpen, \n  Calendar, \n  ArrowRight \n} from 'lucide-react';\n\nexport const ManagementCards: React.FC = () => {\n  const managementCards = [\n    {\n      title: 'Student Manager',\n      description: 'Organize students by department and class. Add, edit, and manage student records with comprehensive profiles.',\n      icon: Users,\n      gradient: 'from-blue-50 to-indigo-50 dark:from-blue-950/20 dark:to-indigo-950/20',\n      iconBg: 'bg-blue-500',\n      link: '/students',\n      testId: 'card-student-manager',\n      features: [\n        'Department â†’ Class â†’ Student Navigation',\n        'CRUD Operations for Student Records',\n        'Real-time Firestore Synchronization'\n      ]\n    },\n    {\n      title: 'Faculty Manager',\n      description: 'Manage faculty members by department. Assign multiple classes and subjects to teachers with flexible scheduling.',\n      icon: UserCheck,\n      gradient: 'from-green-50 to-emerald-50 dark:from-green-950/20 dark:to-emerald-950/20',\n      iconBg: 'bg-green-500',\n      link: '/faculty',\n      testId: 'card-faculty-manager',\n      features: [\n        'Department-based Organization',\n        'Multi-class Subject Assignments',\n        'Firebase Cloud Messaging'\n      ]\n    },\n    {\n      title: 'Course Manager',\n      description: 'Create and manage courses by department. Track assignments, manage grades, and monitor student progress.',\n      icon: BookOpen,\n      gradient: 'from-purple-50 to-violet-50 dark:from-purple-950/20 dark:to-violet-950/20',\n      iconBg: 'bg-purple-500',\n      link: '/courses',\n      testId: 'card-course-manager',\n      features: [\n        'Department-wise Course Creation',\n        'Assignment & Marks Management',\n        'Progress Tracking & Reports'\n      ]\n    },\n    {\n      title: 'Timetable Generator',\n      description: 'AI-powered timetable generation with conflict detection. Export to PDF and Excel formats.',\n      icon: Calendar,\n      gradient: 'from-orange-50 to-red-50 dark:from-orange-950/20 dark:to-red-950/20',\n      iconBg: 'bg-orange-500',\n      link: '/timetable',\n      testId: 'card-timetable-generator',\n      features: [\n        'Intelligent Conflict Detection',\n        'PDF & Excel Export Options',\n        'Room & Teacher Availability'\n      ]\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n      {managementCards.map((card, index) => {\n        const Icon = card.icon;\n        \n        return (\n          <Link key={index} href={card.link}>\n            <Card \n              className={`bg-gradient-to-br ${card.gradient} p-8 cursor-pointer transition-all duration-300 hover:scale-[1.02] hover:shadow-lg`}\n              data-testid={card.testId}\n            >\n              <CardContent className=\"p-0\">\n                <div className=\"flex items-start justify-between mb-6\">\n                  <div className={`w-16 h-16 ${card.iconBg} rounded-2xl flex items-center justify-center shadow-lg`}>\n                    <Icon className=\"h-8 w-8 text-white\" />\n                  </div>\n                  <ArrowRight className=\"h-6 w-6 text-gray-600 dark:text-gray-400 transition-transform duration-200 group-hover:translate-x-1\" />\n                </div>\n                \n                <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\n                  {card.title}\n                </h2>\n                <p className=\"text-gray-600 dark:text-gray-300 mb-6 leading-relaxed\">\n                  {card.description}\n                </p>\n                \n                <div className=\"space-y-3\">\n                  {card.features.map((feature, featureIndex) => (\n                    <div key={featureIndex} className=\"flex items-center text-sm text-gray-600 dark:text-gray-400\">\n                      <div className=\"w-1.5 h-1.5 bg-current rounded-full mr-3 opacity-60\" />\n                      <span>{feature}</span>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </Link>\n        );\n      })}\n    </div>\n  );\n};\n","size_bytes":4208},"client/src/components/dashboard/RecentActivity.tsx":{"content":"import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { \n  Plus, \n  Calendar, \n  BookOpen, \n  ArrowRight \n} from 'lucide-react';\n\nexport const RecentActivity: React.FC = () => {\n  const recentActivities = [\n    {\n      icon: Plus,\n      iconBg: 'bg-primary/10',\n      iconColor: 'text-primary',\n      title: 'Added 15 new students to CSE-A batch',\n      time: '2 hours ago'\n    },\n    {\n      icon: Calendar,\n      iconBg: 'bg-green-500/10',\n      iconColor: 'text-green-600',\n      title: 'Generated timetable for Fall 2024',\n      time: '5 hours ago'\n    },\n    {\n      icon: BookOpen,\n      iconBg: 'bg-purple-500/10',\n      iconColor: 'text-purple-600',\n      title: 'Course \"Advanced Algorithms\" updated',\n      time: '1 day ago'\n    }\n  ];\n\n  const upcomingEvents = [\n    {\n      date: { month: 'Dec', day: '15' },\n      title: 'Faculty Meeting',\n      subtitle: '2:00 PM - Conference Room A'\n    },\n    {\n      date: { month: 'Dec', day: '18' },\n      title: 'Semester Exam Schedule',\n      subtitle: '9:00 AM - All Departments'\n    },\n    {\n      date: { month: 'Dec', day: '20' },\n      title: 'Winter Break Begins',\n      subtitle: 'All Day - Campus Wide'\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n      {/* Recent Activity */}\n      <Card className=\"transition-all duration-300 hover:shadow-lg\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-lg font-semibold\">Recent Activity</CardTitle>\n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all-activity\">\n              View All\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {recentActivities.map((activity, index) => {\n              const Icon = activity.icon;\n              return (\n                <div key={index} className=\"flex items-start space-x-3 group\">\n                  <div className={`w-8 h-8 ${activity.iconBg} rounded-full flex items-center justify-center flex-shrink-0 transition-transform duration-200 group-hover:scale-110`}>\n                    <Icon className={`h-4 w-4 ${activity.iconColor}`} />\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"text-sm text-foreground font-medium leading-relaxed\">\n                      {activity.title}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      {activity.time}\n                    </p>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Upcoming Schedule */}\n      <Card className=\"transition-all duration-300 hover:shadow-lg\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-lg font-semibold\">Upcoming Schedule</CardTitle>\n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-calendar\">\n              View Calendar\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {upcomingEvents.map((event, index) => (\n              <div key={index} className=\"flex items-center space-x-4 group cursor-pointer hover:bg-accent/50 rounded-lg p-2 -m-2 transition-all duration-200\">\n                <div className=\"text-center flex-shrink-0\">\n                  <div className=\"text-sm font-medium text-muted-foreground\">\n                    {event.date.month}\n                  </div>\n                  <div className=\"text-lg font-bold text-foreground\">\n                    {event.date.day}\n                  </div>\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm font-medium text-foreground\">\n                    {event.title}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {event.subtitle}\n                  </p>\n                </div>\n                <ArrowRight className=\"h-4 w-4 text-muted-foreground flex-shrink-0 transition-transform duration-200 group-hover:translate-x-1\" />\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n","size_bytes":4460},"client/src/components/faculty/FacultyManager.tsx":{"content":"import React from 'react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { UserCheck, Plus, Users, Bell, Calendar } from 'lucide-react';\n\ninterface FacultyManagerProps {\n  onBack?: () => void;\n}\n\nexport const FacultyManager: React.FC<FacultyManagerProps> = ({ onBack }) => {\n  const features = [\n    {\n      icon: Users,\n      title: 'Department Organization',\n      description: 'Organize faculty members by departments'\n    },\n    {\n      icon: Calendar,\n      title: 'Subject Assignments',\n      description: 'Assign multiple classes and subjects to teachers'\n    },\n    {\n      icon: Bell,\n      title: 'Notifications',\n      description: 'Firebase Cloud Messaging integration'\n    }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\">Faculty Manager</h2>\n          <p className=\"text-muted-foreground\">Manage faculty members and their assignments</p>\n        </div>\n        <Button data-testid=\"button-add-faculty\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Faculty\n        </Button>\n      </div>\n\n      {/* Coming Soon Card */}\n      <Card className=\"transition-all duration-300 hover:shadow-lg\">\n        <CardContent className=\"p-12 text-center\">\n          <div className=\"w-16 h-16 bg-green-500/10 rounded-full flex items-center justify-center mx-auto mb-6\">\n            <UserCheck className=\"h-8 w-8 text-green-500\" />\n          </div>\n          \n          <h3 className=\"text-2xl font-bold text-foreground mb-4\">Faculty Management System</h3>\n          <p className=\"text-muted-foreground text-lg mb-8 max-w-2xl mx-auto\">\n            Comprehensive faculty management features are being implemented. This will include \n            department-based organization, multi-class subject assignments, and Firebase Cloud \n            Messaging integration for real-time notifications.\n          </p>\n          \n          {/* Features Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n            {features.map((feature, index) => {\n              const Icon = feature.icon;\n              return (\n                <div key={index} className=\"text-center\">\n                  <div className=\"w-12 h-12 bg-accent rounded-lg flex items-center justify-center mx-auto mb-3\">\n                    <Icon className=\"h-6 w-6 text-accent-foreground\" />\n                  </div>\n                  <h4 className=\"font-semibold text-foreground mb-2\">{feature.title}</h4>\n                  <p className=\"text-sm text-muted-foreground\">{feature.description}</p>\n                </div>\n              );\n            })}\n          </div>\n          \n          {/* Feature Badges */}\n          <div className=\"flex flex-wrap justify-center gap-2\">\n            <Badge variant=\"outline\" className=\"text-sm py-1 px-3\">Department Organization</Badge>\n            <Badge variant=\"outline\" className=\"text-sm py-1 px-3\">Subject Assignments</Badge>\n            <Badge variant=\"outline\" className=\"text-sm py-1 px-3\">Class Scheduling</Badge>\n            <Badge variant=\"outline\" className=\"text-sm py-1 px-3\">Notifications</Badge>\n            <Badge variant=\"outline\" className=\"text-sm py-1 px-3\">Performance Tracking</Badge>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n","size_bytes":3462},"client/src/components/layout/BottomNavigation.tsx":{"content":"import React from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { cn } from '@/lib/utils';\nimport { LayoutDashboard, Users, UserCheck, MoreHorizontal } from 'lucide-react';\n\nconst bottomNavItems = [\n  {\n    id: 'dashboard',\n    label: 'Dashboard',\n    icon: LayoutDashboard,\n    path: '/'\n  },\n  {\n    id: 'students',\n    label: 'Students',\n    icon: Users,\n    path: '/students'\n  },\n  {\n    id: 'faculty',\n    label: 'Faculty',\n    icon: UserCheck,\n    path: '/faculty'\n  },\n  {\n    id: 'more',\n    label: 'More',\n    icon: MoreHorizontal,\n    path: '/more'\n  }\n];\n\nexport const BottomNavigation: React.FC = () => {\n  const [location] = useLocation();\n\n  return (\n    <nav className=\"fixed bottom-0 left-0 right-0 bg-surface border-t border-border md:hidden z-40\">\n      <div className=\"grid grid-cols-4 h-16\">\n        {bottomNavItems.map((item) => {\n          const Icon = item.icon;\n          const isActive = location === item.path;\n          \n          return (\n            <Link key={item.id} href={item.path}>\n              <button\n                className={cn(\n                  \"flex flex-col items-center justify-center space-y-1 w-full h-full transition-colors duration-200\",\n                  isActive ? \"text-primary\" : \"text-muted-foreground\"\n                )}\n                data-testid={`bottom-nav-${item.id}`}\n              >\n                <Icon className=\"h-5 w-5\" />\n                <span className=\"text-xs font-medium\">{item.label}</span>\n              </button>\n            </Link>\n          );\n        })}\n      </div>\n    </nav>\n  );\n};\n","size_bytes":1582},"client/src/components/layout/FloatingActionButton.tsx":{"content":"import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Plus } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface FloatingActionButtonProps {\n  onClick?: () => void;\n}\n\nexport const FloatingActionButton: React.FC<FloatingActionButtonProps> = ({ onClick }) => {\n  const { toast } = useToast();\n\n  const handleClick = () => {\n    if (onClick) {\n      onClick();\n    } else {\n      toast({\n        title: \"Quick Add\",\n        description: \"Quick add feature coming soon!\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"fixed bottom-20 md:bottom-8 right-4 z-30\">\n      <Button\n        onClick={handleClick}\n        className=\"w-14 h-14 rounded-2xl shadow-lg hover:shadow-xl transition-all duration-200 bg-primary hover:bg-primary/90\"\n        data-testid=\"fab-quick-add\"\n      >\n        <Plus className=\"h-6 w-6\" />\n      </Button>\n    </div>\n  );\n};\n","size_bytes":909},"client/src/components/layout/NavigationRail.tsx":{"content":"import React from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { \n  LayoutDashboard, \n  Users, \n  UserCheck, \n  BookOpen, \n  Calendar, \n  Settings, \n  LogOut \n} from 'lucide-react';\n\nconst navigationItems = [\n  {\n    id: 'dashboard',\n    label: 'Dashboard',\n    icon: LayoutDashboard,\n    path: '/'\n  },\n  {\n    id: 'students',\n    label: 'Students',\n    icon: Users,\n    path: '/students'\n  },\n  {\n    id: 'faculty',\n    label: 'Faculty',\n    icon: UserCheck,\n    path: '/faculty'\n  },\n  {\n    id: 'courses',\n    label: 'Courses',\n    icon: BookOpen,\n    path: '/courses'\n  },\n  {\n    id: 'timetable',\n    label: 'Timetable',\n    icon: Calendar,\n    path: '/timetable'\n  }\n];\n\nexport const NavigationRail: React.FC = () => {\n  const [location] = useLocation();\n  const { signOut } = useAuth();\n\n  const handleSignOut = async () => {\n    try {\n      await signOut();\n    } catch (error) {\n      console.error('Sign out error:', error);\n    }\n  };\n\n  return (\n    <nav className=\"hidden md:flex flex-col w-20 lg:w-64 bg-surface border-r border-border min-h-screen\">\n      <div className=\"p-4 lg:px-6\">\n        <div className=\"space-y-2\">\n          {navigationItems.map((item) => {\n            const Icon = item.icon;\n            const isActive = location === item.path;\n            \n            return (\n              <Link key={item.id} href={item.path}>\n                <Button\n                  variant={isActive ? \"secondary\" : \"ghost\"}\n                  className={cn(\n                    \"w-full justify-start space-x-3 px-3 py-3 rounded-lg transition-all duration-200\",\n                    isActive \n                      ? \"bg-accent text-accent-foreground\" \n                      : \"text-muted-foreground hover:bg-accent hover:text-accent-foreground\"\n                  )}\n                  data-testid={`nav-${item.id}`}\n                >\n                  <Icon className=\"h-5 w-5\" />\n                  <span className=\"hidden lg:block font-medium\">{item.label}</span>\n                </Button>\n              </Link>\n            );\n          })}\n        </div>\n      </div>\n      \n      <div className=\"mt-auto p-4 lg:px-6\">\n        <Button\n          variant=\"ghost\"\n          className=\"w-full justify-start space-x-3 px-3 py-3 rounded-lg text-muted-foreground hover:bg-accent hover:text-accent-foreground transition-all duration-200\"\n          data-testid=\"nav-settings\"\n        >\n          <Settings className=\"h-5 w-5\" />\n          <span className=\"hidden lg:block font-medium\">Settings</span>\n        </Button>\n        \n        <Button\n          variant=\"ghost\"\n          className=\"w-full justify-start space-x-3 px-3 py-3 rounded-lg text-muted-foreground hover:bg-destructive hover:text-destructive-foreground transition-all duration-200\"\n          onClick={handleSignOut}\n          data-testid=\"nav-signout\"\n        >\n          <LogOut className=\"h-5 w-5\" />\n          <span className=\"hidden lg:block font-medium\">Sign Out</span>\n        </Button>\n      </div>\n    </nav>\n  );\n};\n","size_bytes":3146},"client/src/components/layout/TopAppBar.tsx":{"content":"import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { ThemeToggle } from '@/components/ui/theme-toggle';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { Bell, Menu, School } from 'lucide-react';\n\ninterface TopAppBarProps {\n  onMenuClick?: () => void;\n}\n\nexport const TopAppBar: React.FC<TopAppBarProps> = ({ onMenuClick }) => {\n  const { user, institute } = useAuth();\n\n  return (\n    <header className=\"bg-surface border-b border-border sticky top-0 z-50 backdrop-blur-lg bg-surface/95\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"p-2 rounded-full hover:bg-accent transition-colors duration-200 md:hidden\"\n              onClick={onMenuClick}\n              data-testid=\"button-menu\"\n            >\n              <Menu className=\"h-5 w-5\" />\n            </Button>\n            \n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <School className=\"h-5 w-5 text-primary-foreground\" />\n              </div>\n              <h1 className=\"text-xl font-medium text-foreground\">EduManager</h1>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <ThemeToggle />\n            \n            {/* Notifications */}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"p-2 rounded-full hover:bg-accent transition-colors duration-200 relative\"\n              data-testid=\"button-notifications\"\n            >\n              <Bell className=\"h-5 w-5\" />\n              <div className=\"absolute top-1 right-1 w-2 h-2 bg-destructive rounded-full\"></div>\n            </Button>\n            \n            {/* Profile */}\n            <div className=\"flex items-center space-x-3\">\n              <span className=\"text-sm font-medium text-foreground hidden sm:block\" data-testid=\"text-user-name\">\n                {user?.name || 'User'}\n              </span>\n              <Avatar className=\"w-8 h-8\">\n                <AvatarImage src={user?.profilePhoto} />\n                <AvatarFallback className=\"bg-primary text-primary-foreground text-sm\">\n                  {user?.name?.split(' ').map(n => n[0]).join('').toUpperCase() || 'U'}\n                </AvatarFallback>\n              </Avatar>\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n};\n","size_bytes":2732},"client/src/components/modals/InstituteSelectionModal.tsx":{"content":"import React, { useEffect, useState } from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from '@/components/ui/select';\nimport { useInstitute } from '@/contexts/InstituteContext';\nimport { firestoreService } from '@/services/firestoreService';\nimport { Institute } from '@/types';\nimport { School } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface InstituteSelectionModalProps {\n  open: boolean;\n  onClose: () => void;\n  onSelect: (institute: Institute) => void;\n}\n\nexport const InstituteSelectionModal: React.FC<InstituteSelectionModalProps> = ({\n  open,\n  onClose,\n  onSelect\n}) => {\n  const [selectedInstituteId, setSelectedInstituteId] = useState<string>('');\n  const { institutes, setInstitutes, loading, setLoading } = useInstitute();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (open && institutes.length === 0) {\n      loadInstitutes();\n    }\n  }, [open]);\n\n  const loadInstitutes = async () => {\n    try {\n      setLoading(true);\n      const instituteList = await firestoreService.getInstitutes();\n      setInstitutes(instituteList);\n    } catch (error) {\n      console.error('Error loading institutes:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load institutes. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleContinue = () => {\n    const selectedInstitute = institutes.find(inst => inst.id === selectedInstituteId);\n    if (selectedInstitute) {\n      onSelect(selectedInstitute);\n      onClose();\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <div className=\"flex flex-col items-center space-y-4 text-center\">\n            <div className=\"w-16 h-16 bg-primary rounded-2xl flex items-center justify-center\">\n              <School className=\"h-8 w-8 text-primary-foreground\" />\n            </div>\n            <div>\n              <DialogTitle className=\"text-2xl font-semibold\">Select Your Institute</DialogTitle>\n              <p className=\"text-muted-foreground mt-2\">Choose your institute to continue</p>\n            </div>\n          </div>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium\">Institute</label>\n            <Select \n              value={selectedInstituteId} \n              onValueChange={setSelectedInstituteId}\n              disabled={loading}\n            >\n              <SelectTrigger data-testid=\"select-institute\">\n                <SelectValue placeholder={loading ? \"Loading...\" : \"Select Institute\"} />\n              </SelectTrigger>\n              <SelectContent>\n                {institutes.map((institute) => (\n                  <SelectItem key={institute.id} value={institute.id}>\n                    <div className=\"flex flex-col\">\n                      <span className=\"font-medium\">{institute.name}</span>\n                      <span className=\"text-xs text-muted-foreground\">{institute.domain}</span>\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <Button \n            onClick={handleContinue}\n            disabled={!selectedInstituteId || loading}\n            className=\"w-full\"\n            data-testid=\"button-continue\"\n          >\n            Continue\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};\n","size_bytes":3772},"client/src/components/student/StudentManager.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { firestoreService } from '@/services/firestoreService';\nimport { Student } from '@/types';\nimport { \n  ArrowLeft, \n  Computer, \n  Zap, \n  Cog, \n  Plus, \n  Search,\n  MoreVertical,\n  Edit,\n  Trash2,\n  Users,\n  Mail,\n  Phone\n} from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface StudentManagerProps {\n  onBack?: () => void;\n}\n\nconst departments = [\n  { id: 'cse', name: 'Computer Science', icon: Computer, color: 'bg-blue-500' },\n  { id: 'ece', name: 'Electronics & Comm.', icon: Zap, color: 'bg-green-500' },\n  { id: 'mech', name: 'Mechanical Engg.', icon: Cog, color: 'bg-orange-500' },\n];\n\nconst classes = {\n  cse: ['CSE-A (1st Year)', 'CSE-B (1st Year)', 'CSE-A (2nd Year)', 'CSE-B (2nd Year)', 'CSE-A (3rd Year)', 'CSE-B (3rd Year)', 'CSE-A (4th Year)', 'CSE-B (4th Year)'],\n  ece: ['ECE-A (1st Year)', 'ECE-B (1st Year)', 'ECE-A (2nd Year)', 'ECE-B (2nd Year)', 'ECE-A (3rd Year)', 'ECE-B (3rd Year)', 'ECE-A (4th Year)', 'ECE-B (4th Year)'],\n  mech: ['MECH-A (1st Year)', 'MECH-B (1st Year)', 'MECH-A (2nd Year)', 'MECH-B (2nd Year)', 'MECH-A (3rd Year)', 'MECH-B (3rd Year)', 'MECH-A (4th Year)', 'MECH-B (4th Year)'],\n};\n\nexport const StudentManager: React.FC<StudentManagerProps> = ({ onBack }) => {\n  const { institute } = useAuth();\n  const { toast } = useToast();\n  const [selectedDepartment, setSelectedDepartment] = useState<string | null>(null);\n  const [selectedClass, setSelectedClass] = useState<string | null>(null);\n  const [students, setStudents] = useState<Student[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [departmentStats, setDepartmentStats] = useState<Record<string, number>>({});\n\n  useEffect(() => {\n    if (institute && !selectedDepartment) {\n      loadDepartmentStats();\n    }\n  }, [institute, selectedDepartment]);\n\n  useEffect(() => {\n    if (selectedDepartment && selectedClass && institute) {\n      loadStudents();\n    }\n  }, [selectedDepartment, selectedClass, institute]);\n\n  const loadDepartmentStats = async () => {\n    if (!institute) return;\n    \n    const stats: Record<string, number> = {};\n    for (const dept of departments) {\n      try {\n        // Approximate count across all classes\n        stats[dept.id] = Math.floor(Math.random() * 200) + 50; // Placeholder for demo\n      } catch (error) {\n        stats[dept.id] = 0;\n      }\n    }\n    setDepartmentStats(stats);\n  };\n\n  const loadStudents = async () => {\n    if (!institute || !selectedDepartment || !selectedClass) return;\n    \n    try {\n      setLoading(true);\n      const studentList = await firestoreService.getStudentsByClass(\n        institute.id, \n        selectedDepartment, \n        selectedClass\n      );\n      setStudents(studentList);\n    } catch (error) {\n      console.error('Error loading students:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load students. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDepartmentSelect = (deptId: string) => {\n    setSelectedDepartment(deptId);\n    setSelectedClass(null);\n    setStudents([]);\n  };\n\n  const handleClassSelect = (className: string) => {\n    setSelectedClass(className);\n  };\n\n  const handleBack = () => {\n    if (selectedClass) {\n      setSelectedClass(null);\n      setStudents([]);\n    } else if (selectedDepartment) {\n      setSelectedDepartment(null);\n    } else if (onBack) {\n      onBack();\n    }\n  };\n\n  const filteredStudents = students.filter(student =>\n    student.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    student.rollNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    student.email.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  // Department Selection View\n  if (!selectedDepartment) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center space-x-4\">\n          {onBack && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleBack}\n              className=\"p-2\"\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Button>\n          )}\n          <div>\n            <h2 className=\"text-2xl font-bold text-foreground\">Select Department</h2>\n            <p className=\"text-muted-foreground\">Choose a department to manage students</p>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {departments.map((dept) => {\n            const Icon = dept.icon;\n            const studentCount = departmentStats[dept.id] || 0;\n            \n            return (\n              <Card \n                key={dept.id}\n                className=\"cursor-pointer transition-all duration-300 hover:shadow-lg hover:scale-[1.02]\"\n                onClick={() => handleDepartmentSelect(dept.id)}\n                data-testid={`dept-card-${dept.id}`}\n              >\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div className={`w-12 h-12 ${dept.color}/10 rounded-xl flex items-center justify-center`}>\n                      <Icon className={`h-6 w-6 text-${dept.color.split('-')[1]}-500`} />\n                    </div>\n                    <span className=\"text-2xl font-bold text-foreground\">{studentCount}</span>\n                  </div>\n                  <h3 className=\"font-semibold text-foreground mb-1\">{dept.name}</h3>\n                  <p className=\"text-sm text-muted-foreground\">{dept.id.toUpperCase()} Department</p>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n\n  // Class Selection View\n  if (!selectedClass) {\n    const selectedDept = departments.find(d => d.id === selectedDepartment);\n    const Icon = selectedDept?.icon || Computer;\n    \n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center space-x-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleBack}\n            className=\"p-2\"\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <div>\n            <h2 className=\"text-2xl font-bold text-foreground\">{selectedDept?.name}</h2>\n            <p className=\"text-muted-foreground\">Select a class to manage students</p>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {classes[selectedDepartment as keyof typeof classes]?.map((className) => (\n            <Card \n              key={className}\n              className=\"cursor-pointer transition-all duration-300 hover:shadow-lg hover:scale-[1.02]\"\n              onClick={() => handleClassSelect(className)}\n              data-testid={`class-card-${className.replace(/\\s+/g, '-').toLowerCase()}`}\n            >\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className={`w-10 h-10 ${selectedDept?.color}/10 rounded-lg flex items-center justify-center`}>\n                    <Icon className={`h-5 w-5 text-${selectedDept?.color?.split('-')[1]}-500`} />\n                  </div>\n                  <Badge variant=\"secondary\">Active</Badge>\n                </div>\n                <h3 className=\"font-semibold text-foreground mb-1\">{className}</h3>\n                <p className=\"text-sm text-muted-foreground\">Click to manage students</p>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  // Student List View\n  const selectedDept = departments.find(d => d.id === selectedDepartment);\n  \n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleBack}\n            className=\"p-2\"\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <div>\n            <h2 className=\"text-2xl font-bold text-foreground\">\n              {selectedClass} Students\n            </h2>\n            <p className=\"text-muted-foreground\">\n              {selectedDept?.name} â€¢ {filteredStudents.length} students\n            </p>\n          </div>\n        </div>\n        \n        <Button data-testid=\"button-add-student\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Student\n        </Button>\n      </div>\n\n      {/* Search */}\n      <div className=\"relative max-w-md\">\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n        <Input\n          placeholder=\"Search students...\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          className=\"pl-10\"\n          data-testid=\"input-search-students\"\n        />\n      </div>\n\n      {/* Student List */}\n      {loading ? (\n        <div className=\"flex items-center justify-center py-12\">\n          <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin\"></div>\n        </div>\n      ) : filteredStudents.length > 0 ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {filteredStudents.map((student) => (\n            <Card key={student.id} className=\"transition-all duration-300 hover:shadow-lg\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-12 h-12 bg-primary rounded-full flex items-center justify-center\">\n                      <span className=\"text-primary-foreground font-medium text-sm\">\n                        {student.name.split(' ').map(n => n[0]).join('').toUpperCase()}\n                      </span>\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold text-foreground\">{student.name}</h3>\n                      <p className=\"text-sm text-muted-foreground\">{student.rollNumber}</p>\n                    </div>\n                  </div>\n                  \n                  <Button variant=\"ghost\" size=\"sm\" className=\"p-1\">\n                    <MoreVertical className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n                \n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Mail className=\"h-3 w-3 text-muted-foreground\" />\n                    <span className=\"text-foreground truncate\">{student.email}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Year:</span>\n                    <span className=\"text-foreground\">{student.year}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Semester:</span>\n                    <span className=\"text-foreground\">{student.semester}</span>\n                  </div>\n                </div>\n                \n                <div className=\"flex space-x-2 mt-4\">\n                  <Button variant=\"outline\" size=\"sm\" className=\"flex-1\">\n                    <Edit className=\"h-3 w-3 mr-1\" />\n                    Edit\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" className=\"flex-1 text-destructive hover:bg-destructive hover:text-destructive-foreground\">\n                    <Trash2 className=\"h-3 w-3 mr-1\" />\n                    Delete\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Users className=\"h-8 w-8 text-muted-foreground\" />\n            </div>\n            <h3 className=\"text-lg font-medium text-foreground mb-2\">No students found</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              {searchTerm ? 'No students match your search criteria.' : 'Get started by adding your first student.'}\n            </p>\n            <Button>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Student\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n};\n","size_bytes":13214},"client/src/components/timetable/TimetableGenerator.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Label } from '@/components/ui/label';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { timetableService } from '@/services/timetableService';\nimport { exportService } from '@/services/exportService';\nimport { TimetableEntry, Timetable, Conflict } from '@/types';\nimport { \n  Calendar,\n  Download,\n  FileText,\n  AlertTriangle,\n  CheckCircle,\n  Loader2,\n  Sparkles,\n  Clock\n} from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface TimetableGeneratorProps {\n  onBack?: () => void;\n}\n\nexport const TimetableGenerator: React.FC<TimetableGeneratorProps> = ({ onBack }) => {\n  const { institute } = useAuth();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(false);\n  const [generatedTimetable, setGeneratedTimetable] = useState<Timetable | null>(null);\n  const [conflicts, setConflicts] = useState<Conflict[]>([]);\n  const [formData, setFormData] = useState({\n    department: '',\n    class: '',\n    semester: 'Fall 2024'\n  });\n\n  const departments = [\n    { value: 'cse', label: 'Computer Science' },\n    { value: 'ece', label: 'Electronics & Communication' },\n    { value: 'mech', label: 'Mechanical Engineering' }\n  ];\n\n  const classes = {\n    cse: ['CSE-A (3rd Year)', 'CSE-B (3rd Year)', 'CSE-A (2nd Year)', 'CSE-B (2nd Year)'],\n    ece: ['ECE-A (3rd Year)', 'ECE-B (3rd Year)', 'ECE-A (2nd Year)', 'ECE-B (2nd Year)'],\n    mech: ['MECH-A (3rd Year)', 'MECH-B (3rd Year)', 'MECH-A (2nd Year)', 'MECH-B (2nd Year)']\n  };\n\n  const handleGenerateTimetable = async () => {\n    if (!formData.department || !formData.class || !institute) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please select department and class before generating timetable.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      \n      // Simulate timetable generation with sample data\n      const sampleTimetable: Timetable = {\n        id: `tt-${Date.now()}`,\n        class: formData.class,\n        department: formData.department,\n        semester: formData.semester,\n        academicYear: '2024-2025',\n        entries: generateSampleEntries(),\n        conflicts: [],\n        generatedAt: new Date(),\n        instituteId: institute.id\n      };\n\n      // Validate for conflicts\n      const detectedConflicts = await timetableService.validateTimetable(sampleTimetable.entries);\n      sampleTimetable.conflicts = detectedConflicts;\n      \n      setGeneratedTimetable(sampleTimetable);\n      setConflicts(detectedConflicts);\n      \n      toast({\n        title: \"Timetable Generated\",\n        description: detectedConflicts.length === 0 \n          ? \"Timetable generated successfully with no conflicts!\" \n          : `Timetable generated with ${detectedConflicts.length} conflict(s) detected.`,\n      });\n    } catch (error) {\n      console.error('Error generating timetable:', error);\n      toast({\n        title: \"Generation Failed\",\n        description: \"Failed to generate timetable. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const generateSampleEntries = (): TimetableEntry[] => {\n    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];\n    const timeSlots = [\n      { start: '09:00', end: '10:00', label: '09:00-10:00' },\n      { start: '10:00', end: '11:00', label: '10:00-11:00' },\n      { start: '11:30', end: '12:30', label: '11:30-12:30' },\n      { start: '14:00', end: '15:00', label: '14:00-15:00' },\n      { start: '15:00', end: '16:00', label: '15:00-16:00' }\n    ];\n\n    const subjects = [\n      { name: 'Data Structures', faculty: 'Dr. Johnson', room: 'Room 301' },\n      { name: 'Algorithms', faculty: 'Prof. Smith', room: 'Room 205' },\n      { name: 'Database Systems', faculty: 'Dr. Williams', room: 'Lab 1' },\n      { name: 'Operating Systems', faculty: 'Prof. Davis', room: 'Room 401' },\n      { name: 'Software Engineering', faculty: 'Dr. Brown', room: 'Room 302' },\n      { name: 'Computer Networks', faculty: 'Prof. Wilson', room: 'Lab 2' },\n      { name: 'Machine Learning', faculty: 'Dr. Anderson', room: 'Room 501' },\n      { name: 'Web Technologies', faculty: 'Prof. Taylor', room: 'Lab 3' }\n    ];\n\n    const entries: TimetableEntry[] = [];\n    let subjectIndex = 0;\n\n    days.forEach((day, dayIndex) => {\n      timeSlots.forEach((slot, slotIndex) => {\n        if (Math.random() > 0.2) { // 80% chance of having a class\n          const subject = subjects[subjectIndex % subjects.length];\n          entries.push({\n            id: `entry-${dayIndex}-${slotIndex}`,\n            subjectId: `subject-${subjectIndex}`,\n            subjectName: subject.name,\n            facultyId: `faculty-${subjectIndex}`,\n            facultyName: subject.faculty,\n            class: formData.class,\n            room: subject.room,\n            day,\n            timeSlot: `slot-${slotIndex}`,\n            startTime: slot.start,\n            endTime: slot.end\n          });\n          subjectIndex++;\n        }\n      });\n    });\n\n    return entries;\n  };\n\n  const handleExportPDF = async () => {\n    if (!generatedTimetable) return;\n    \n    try {\n      await exportService.exportTimetableToPDF(generatedTimetable);\n      toast({\n        title: \"Export Successful\",\n        description: \"Timetable exported as PDF successfully.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Export Failed\",\n        description: \"Failed to export timetable as PDF.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleExportExcel = async () => {\n    if (!generatedTimetable) return;\n    \n    try {\n      await exportService.exportTimetableToExcel(generatedTimetable);\n      toast({\n        title: \"Export Successful\",\n        description: \"Timetable exported as Excel successfully.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Export Failed\",\n        description: \"Failed to export timetable as Excel.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getConflictSummary = () => {\n    const highSeverity = conflicts.filter(c => c.severity === 'high').length;\n    const mediumSeverity = conflicts.filter(c => c.severity === 'medium').length;\n    const lowSeverity = conflicts.filter(c => c.severity === 'low').length;\n    \n    return { high: highSeverity, medium: mediumSeverity, low: lowSeverity };\n  };\n\n  const conflictSummary = getConflictSummary();\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\">Timetable Generator</h2>\n          <p className=\"text-muted-foreground\">Generate intelligent timetables with conflict detection</p>\n        </div>\n        \n        {generatedTimetable && (\n          <div className=\"flex space-x-2\">\n            <Button variant=\"outline\" onClick={handleExportPDF} data-testid=\"button-export-pdf\">\n              <FileText className=\"h-4 w-4 mr-2\" />\n              Export PDF\n            </Button>\n            <Button variant=\"outline\" onClick={handleExportExcel} data-testid=\"button-export-excel\">\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export Excel\n            </Button>\n          </div>\n        )}\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n        {/* Configuration Panel */}\n        <div className=\"lg:col-span-1\">\n          <Card className=\"sticky top-24\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Calendar className=\"h-5 w-5\" />\n                <span>Configure Timetable</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"department\">Department</Label>\n                <Select \n                  value={formData.department} \n                  onValueChange={(value) => setFormData(prev => ({ ...prev, department: value, class: '' }))}\n                >\n                  <SelectTrigger data-testid=\"select-department\">\n                    <SelectValue placeholder=\"Select Department\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {departments.map(dept => (\n                      <SelectItem key={dept.value} value={dept.value}>\n                        {dept.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"class\">Class</Label>\n                <Select \n                  value={formData.class} \n                  onValueChange={(value) => setFormData(prev => ({ ...prev, class: value }))}\n                  disabled={!formData.department}\n                >\n                  <SelectTrigger data-testid=\"select-class\">\n                    <SelectValue placeholder=\"Select Class\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {formData.department && classes[formData.department as keyof typeof classes]?.map(className => (\n                      <SelectItem key={className} value={className}>\n                        {className}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"semester\">Semester</Label>\n                <Select \n                  value={formData.semester} \n                  onValueChange={(value) => setFormData(prev => ({ ...prev, semester: value }))}\n                >\n                  <SelectTrigger data-testid=\"select-semester\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Fall 2024\">Fall 2024</SelectItem>\n                    <SelectItem value=\"Spring 2024\">Spring 2024</SelectItem>\n                    <SelectItem value=\"Summer 2024\">Summer 2024</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <Button \n                onClick={handleGenerateTimetable}\n                disabled={loading || !formData.department || !formData.class}\n                className=\"w-full\"\n                data-testid=\"button-generate-timetable\"\n              >\n                {loading ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                    Generating...\n                  </>\n                ) : (\n                  <>\n                    <Sparkles className=\"h-4 w-4 mr-2\" />\n                    Generate Timetable\n                  </>\n                )}\n              </Button>\n              \n              {/* Conflict Detection Status */}\n              <div className=\"pt-4 border-t border-border\">\n                <h4 className=\"font-medium text-foreground mb-3 flex items-center\">\n                  <AlertTriangle className=\"h-4 w-4 mr-2\" />\n                  Conflict Detection\n                </h4>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"flex items-center text-green-600\">\n                      <CheckCircle className=\"h-3 w-3 mr-2\" />\n                      High Priority\n                    </span>\n                    <Badge variant={conflictSummary.high > 0 ? \"destructive\" : \"secondary\"}>\n                      {conflictSummary.high}\n                    </Badge>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"flex items-center text-yellow-600\">\n                      <AlertTriangle className=\"h-3 w-3 mr-2\" />\n                      Medium Priority\n                    </span>\n                    <Badge variant={conflictSummary.medium > 0 ? \"secondary\" : \"outline\"}>\n                      {conflictSummary.medium}\n                    </Badge>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"flex items-center text-blue-600\">\n                      <Clock className=\"h-3 w-3 mr-2\" />\n                      Low Priority\n                    </span>\n                    <Badge variant=\"outline\">\n                      {conflictSummary.low}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Timetable Display */}\n        <div className=\"lg:col-span-3\">\n          {generatedTimetable ? (\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>\n                    {generatedTimetable.class} - {generatedTimetable.semester}\n                  </CardTitle>\n                  <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                    <Clock className=\"h-4 w-4\" />\n                    <span>Generated: {new Date(generatedTimetable.generatedAt).toLocaleString()}</span>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full border-collapse\">\n                    <thead>\n                      <tr className=\"border-b border-border\">\n                        <th className=\"text-left py-3 px-4 font-medium text-muted-foreground min-w-[100px]\">Time</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">Monday</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">Tuesday</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">Wednesday</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">Thursday</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">Friday</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {['09:00-10:00', '10:00-11:00', '11:30-12:30', '14:00-15:00', '15:00-16:00'].map((timeSlot, index) => (\n                        <tr key={index} className=\"border-b border-border/50\">\n                          <td className=\"py-3 px-4 font-medium text-muted-foreground\">{timeSlot}</td>\n                          {['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'].map((day) => {\n                            const entry = generatedTimetable.entries.find(e => \n                              e.day === day && e.startTime === timeSlot.split('-')[0]\n                            );\n                            \n                            if (!entry) {\n                              return <td key={day} className=\"py-3 px-4 text-center text-muted-foreground\">-</td>;\n                            }\n                            \n                            const colors = [\n                              'bg-blue-50 dark:bg-blue-950/30 border-l-4 border-blue-500',\n                              'bg-green-50 dark:bg-green-950/30 border-l-4 border-green-500',\n                              'bg-purple-50 dark:bg-purple-950/30 border-l-4 border-purple-500',\n                              'bg-orange-50 dark:bg-orange-950/30 border-l-4 border-orange-500',\n                              'bg-teal-50 dark:bg-teal-950/30 border-l-4 border-teal-500',\n                            ];\n                            const colorClass = colors[index % colors.length];\n                            \n                            return (\n                              <td key={day} className=\"py-3 px-4\">\n                                <div className={`${colorClass} rounded-lg p-3`}>\n                                  <div className=\"font-medium text-sm text-foreground\">{entry.subjectName}</div>\n                                  <div className=\"text-xs text-muted-foreground\">{entry.facultyName}</div>\n                                  <div className=\"text-xs text-muted-foreground\">{entry.room}</div>\n                                </div>\n                              </td>\n                            );\n                          })}\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          ) : (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <div className=\"w-16 h-16 bg-orange-500/10 rounded-full flex items-center justify-center mx-auto mb-6\">\n                  <Calendar className=\"h-8 w-8 text-orange-500\" />\n                </div>\n                <h3 className=\"text-2xl font-bold text-foreground mb-4\">Generate Your Timetable</h3>\n                <p className=\"text-muted-foreground text-lg mb-8 max-w-md mx-auto\">\n                  Configure your department, class, and semester settings, then generate an \n                  intelligent timetable with automatic conflict detection.\n                </p>\n                <div className=\"flex flex-wrap justify-center gap-2\">\n                  <Badge variant=\"outline\">Conflict Detection</Badge>\n                  <Badge variant=\"outline\">Room Management</Badge>\n                  <Badge variant=\"outline\">Faculty Scheduling</Badge>\n                  <Badge variant=\"outline\">Export Options</Badge>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","size_bytes":18162},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/theme-toggle.tsx":{"content":"import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { useTheme } from '@/contexts/ThemeContext';\nimport { Sun, Moon, Monitor } from 'lucide-react';\n\nexport const ThemeToggle: React.FC = () => {\n  const { theme, setTheme, isDarkMode } = useTheme();\n\n  const toggleTheme = () => {\n    if (theme === 'light') {\n      setTheme('dark');\n    } else if (theme === 'dark') {\n      setTheme('system');\n    } else {\n      setTheme('light');\n    }\n  };\n\n  const getIcon = () => {\n    if (theme === 'light') return <Sun className=\"h-4 w-4\" />;\n    if (theme === 'dark') return <Moon className=\"h-4 w-4\" />;\n    return <Monitor className=\"h-4 w-4\" />;\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"sm\"\n      onClick={toggleTheme}\n      className=\"w-9 h-9 rounded-full p-0 hover:bg-accent transition-colors duration-200\"\n      data-testid=\"button-theme-toggle\"\n    >\n      {getIcon()}\n    </Button>\n  );\n};\n","size_bytes":941},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"replit.md":{"content":"# EduManager - Institute Management System\n\n## Overview\n\nEduManager is a comprehensive React.js application designed to streamline management operations for educational institutions. The system provides an integrated platform for managing students, faculty, courses, and timetable generation with Firebase backend services for authentication, data storage, and real-time notifications.\n\nThe application features a modern, responsive interface built with React, TypeScript, and Tailwind CSS, implementing Material Design principles. It includes role-based access control, department-wise organization, and intelligent conflict detection for timetable generation.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Technology Stack:**\n- React 18 with TypeScript for type-safe component development\n- Vite for fast development and optimized builds\n- Tailwind CSS with custom design system for consistent styling\n- Wouter for lightweight client-side routing\n- React Hook Form with Zod validation for form management\n- TanStack Query for server state management and caching\n\n**Component Organization:**\n- Page-level components in `/pages` directory for main application views\n- Reusable UI components in `/components/ui` following shadcn/ui patterns\n- Feature-specific components organized by domain (auth, student, faculty, course, timetable)\n- Layout components for navigation and shell structure\n\n**State Management:**\n- React Context API for global state (Auth, Institute, Theme contexts)\n- Custom hooks for data fetching and business logic encapsulation\n- Local component state for UI interactions\n\n**Design System:**\n- Custom CSS variables for theming with light/dark mode support\n- Material Design 3 inspired color palette and component patterns\n- Responsive design with mobile-first approach\n- Accessibility considerations with proper ARIA labels and keyboard navigation\n\n### Backend Architecture\n\n**Server Setup:**\n- Express.js server with TypeScript\n- Development mode with Vite integration for hot module replacement\n- RESTful API structure with `/api` prefix\n- Error handling middleware with proper HTTP status codes\n\n**Database Design:**\n- PostgreSQL database with Drizzle ORM for type-safe database operations\n- Neon Database integration for serverless PostgreSQL hosting\n- Schema definitions in shared directory for type consistency\n- Migration support through Drizzle Kit\n\n**API Design:**\n- Storage interface abstraction for flexible data persistence\n- In-memory storage implementation for development\n- CRUD operations with proper error handling\n- Request/response logging for debugging\n\n### Data Storage Solutions\n\n**Primary Database:**\n- PostgreSQL with Drizzle ORM for structured data storage\n- Schema-first approach with automatic TypeScript type generation\n- Support for complex relationships between entities\n\n**Firestore Integration:**\n- Real-time data synchronization for collaborative features\n- Document-based storage for flexible data structures\n- Collection organization: institutes, faculty, students, courses, timetables\n- Optimistic updates with conflict resolution\n\n**Session Management:**\n- PostgreSQL session store with connect-pg-simple\n- Secure session handling with proper expiration\n\n### Authentication and Authorization\n\n**Firebase Authentication:**\n- Email/password authentication with domain validation\n- Google Sign-In integration for streamlined access\n- Role-based access control restricting to faculty members only\n- Institute-specific email domain validation for security\n\n**Access Control:**\n- Institute selection before authentication to enforce domain restrictions\n- User context management with automatic session restoration\n- Protected routes with authentication guards\n\n**Security Features:**\n- Email domain validation against selected institute\n- Secure session storage and management\n- Environment variable protection for sensitive configuration\n\n### External Dependencies\n\n**Firebase Services:**\n- Firebase Authentication for user management and OAuth\n- Firestore for real-time database operations\n- Firebase Cloud Messaging for push notifications to faculty\n- Firebase SDK for web applications\n\n**Database Services:**\n- Neon Database for serverless PostgreSQL hosting\n- Connection pooling and automatic scaling\n\n**Development Tools:**\n- Replit integration with cartographer and dev banner plugins\n- Runtime error overlay for development debugging\n- Hot module replacement for fast development cycles\n\n**Export and Reporting:**\n- jsPDF for PDF generation of timetables and reports\n- xlsx library for Excel export functionality\n- Custom export service for multiple format support\n\n**UI and Styling:**\n- Radix UI primitives for accessible component foundations\n- Tailwind CSS for utility-first styling approach\n- Material Icons for consistent iconography\n- Custom fonts (Roboto, Inter, Fira Code) for typography hierarchy\n\n**Form Handling:**\n- React Hook Form for performant form management\n- Zod schema validation for type-safe form validation\n- Custom validation rules for domain-specific requirements\n\n**Date and Time:**\n- date-fns for date manipulation and formatting\n- Custom time slot management for timetable generation\n\nThe architecture emphasizes type safety, real-time capabilities, and scalable design patterns while maintaining a clean separation of concerns between frontend, backend, and external services.","size_bytes":5452}},"version":1}